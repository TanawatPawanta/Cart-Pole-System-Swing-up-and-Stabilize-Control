
opentopicFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a18  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd0  08004bd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004bd0  08004bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bd8  08004bd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000000c  08004bec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004bec  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010197  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027f1  00000000  00000000  00030216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00032a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af2  00000000  00000000  00033828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ad6  00000000  00000000  0003431a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012762  00000000  00000000  0004bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000968dc  00000000  00000000  0005e552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039ac  00000000  00000000  000f4e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000f87dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004b98 	.word	0x08004b98

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004b98 	.word	0x08004b98

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Encoder_init>:
 *      Author: tanawatp
 */
#include "main.h"
#include "Encoder.h"
void Encoder_init(Encoder* encoder, TIM_HandleTypeDef* htim_ch, uint8_t freq)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	4613      	mov	r3, r2
 80004e0:	71fb      	strb	r3, [r7, #7]
	encoder->QEI_read = 0;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2200      	movs	r2, #0
 80004e6:	801a      	strh	r2, [r3, #0]
	encoder->QEI_read_m1 = 0;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2200      	movs	r2, #0
 80004ec:	805a      	strh	r2, [r3, #2]
	encoder->diff_QEI = 0;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	2200      	movs	r2, #0
 80004f2:	809a      	strh	r2, [r3, #4]
	encoder->deg = 0;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	2200      	movs	r2, #0
 80004f8:	80da      	strh	r2, [r3, #6]
	encoder->deg_m1 = 0;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2200      	movs	r2, #0
 80004fe:	811a      	strh	r2, [r3, #8]
	encoder->diff_deg = 0;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2200      	movs	r2, #0
 8000504:	815a      	strh	r2, [r3, #10]
	encoder->freq = freq;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	79fa      	ldrb	r2, [r7, #7]
 800050a:	731a      	strb	r2, [r3, #12]
	encoder->htim_ch = htim_ch;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	68ba      	ldr	r2, [r7, #8]
 8000510:	611a      	str	r2, [r3, #16]
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <Encoder_getFeedback>:
void Encoder_getFeedback(Encoder* encoder)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	encoder->QEI_read = __HAL_TIM_GET_COUNTER(encoder->htim_ch);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	691b      	ldr	r3, [r3, #16]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052e:	b21a      	sxth	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	801a      	strh	r2, [r3, #0]
	encoder->diff_QEI = encoder->QEI_read - encoder->QEI_read_m1;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800053a:	b29a      	uxth	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000542:	b29b      	uxth	r3, r3
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	b29b      	uxth	r3, r3
 8000548:	b21a      	sxth	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	809a      	strh	r2, [r3, #4]
	encoder->QEI_read_m1 = encoder->QEI_read;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	805a      	strh	r2, [r3, #2]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <Pole_pulse2degree>:

void Pole_pulse2degree(Encoder* encoder)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	if(encoder->QEI_read<=2000)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000572:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000576:	dc0b      	bgt.n	8000590 <Pole_pulse2degree+0x2c>
	{
//		deg = (encoder->QEI_read*0.09)*100;  gain 100(make it is integer) for avoid decimal when send data to simulink.
		encoder->deg = encoder->QEI_read*9;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800057e:	b29b      	uxth	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	00d2      	lsls	r2, r2, #3
 8000584:	4413      	add	r3, r2
 8000586:	b29b      	uxth	r3, r3
 8000588:	b21a      	sxth	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	80da      	strh	r2, [r3, #6]
 800058e:	e00c      	b.n	80005aa <Pole_pulse2degree+0x46>
	}
	else
	{
//		deg = ((encoder->QEI_read-4000)*0.09)*100;
		encoder->deg = (encoder->QEI_read-4000)*9;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000596:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800059a:	b29b      	uxth	r3, r3
 800059c:	461a      	mov	r2, r3
 800059e:	00d2      	lsls	r2, r2, #3
 80005a0:	4413      	add	r3, r2
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	b21a      	sxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	80da      	strh	r2, [r3, #6]
	}

	encoder->diff_deg = (encoder->deg - encoder->deg_m1);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	b29b      	uxth	r3, r3
 80005be:	b21a      	sxth	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	815a      	strh	r2, [r3, #10]
	encoder->deg_m1 = encoder->deg;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	811a      	strh	r2, [r3, #8]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <Proximity_init>:
 */
#include "main.h"
#include "Proximity.h"

void Proximity_init(Proximity* proximity)
{
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
	proximity->Prox_A = 0;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
	proximity->Prox_B = 0;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2200      	movs	r2, #0
 80005ec:	705a      	strb	r2, [r3, #1]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC1_Init+0x98>)
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0x98>)
 8000616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_ADC1_Init+0x98>)
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_ADC1_Init+0xa0>)
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_ADC1_Init+0x98>)
 800064a:	2201      	movs	r2, #1
 800064c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ADC1_Init+0x98>)
 8000658:	2201      	movs	r2, #1
 800065a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_ADC1_Init+0x98>)
 800065e:	f000 fe0f 	bl	8001280 <HAL_ADC_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000668:	f000 fa46 	bl	8000af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800066c:	2304      	movs	r3, #4
 800066e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_ADC1_Init+0x98>)
 800067e:	f000 fe43 	bl	8001308 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000688:	f000 fa36 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000028 	.word	0x20000028
 8000698:	40012000 	.word	0x40012000
 800069c:	0f000001 	.word	0x0f000001

080006a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a17      	ldr	r2, [pc, #92]	; (800071c <HAL_ADC_MspInit+0x7c>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d127      	bne.n	8000712 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <HAL_ADC_MspInit+0x80>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	4a15      	ldr	r2, [pc, #84]	; (8000720 <HAL_ADC_MspInit+0x80>)
 80006cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d0:	6453      	str	r3, [r2, #68]	; 0x44
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <HAL_ADC_MspInit+0x80>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_ADC_MspInit+0x80>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_ADC_MspInit+0x80>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_ADC_MspInit+0x80>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 80006fa:	2310      	movs	r3, #16
 80006fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	2303      	movs	r3, #3
 8000700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <HAL_ADC_MspInit+0x84>)
 800070e:	f001 fd3d 	bl	800218c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40012000 	.word	0x40012000
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_DMA_Init+0x3c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <MX_DMA_Init+0x3c>)
 8000738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_DMA_Init+0x3c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2011      	movs	r0, #17
 8000750:	f001 f8e3 	bl	800191a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000754:	2011      	movs	r0, #17
 8000756:	f001 f8fc 	bl	8001952 <HAL_NVIC_EnableIRQ>

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b42      	ldr	r3, [pc, #264]	; (800088c <MX_GPIO_Init+0x124>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a41      	ldr	r2, [pc, #260]	; (800088c <MX_GPIO_Init+0x124>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b3f      	ldr	r3, [pc, #252]	; (800088c <MX_GPIO_Init+0x124>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <MX_GPIO_Init+0x124>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a3a      	ldr	r2, [pc, #232]	; (800088c <MX_GPIO_Init+0x124>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b38      	ldr	r3, [pc, #224]	; (800088c <MX_GPIO_Init+0x124>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_GPIO_Init+0x124>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a33      	ldr	r2, [pc, #204]	; (800088c <MX_GPIO_Init+0x124>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_GPIO_Init+0x124>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_GPIO_Init+0x124>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a2c      	ldr	r2, [pc, #176]	; (800088c <MX_GPIO_Init+0x124>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0x124>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	4827      	ldr	r0, [pc, #156]	; (8000890 <MX_GPIO_Init+0x128>)
 80007f4:	f001 fe4e 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_s_Direction_GPIO_Port, Motor_s_Direction_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2104      	movs	r1, #4
 80007fc:	4825      	ldr	r0, [pc, #148]	; (8000894 <MX_GPIO_Init+0x12c>)
 80007fe:	f001 fe49 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000808:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	481f      	ldr	r0, [pc, #124]	; (8000898 <MX_GPIO_Init+0x130>)
 800081a:	f001 fcb7 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800081e:	2320      	movs	r3, #32
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4816      	ldr	r0, [pc, #88]	; (8000890 <MX_GPIO_Init+0x128>)
 8000836:	f001 fca9 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor_s_Direction_Pin;
 800083a:	2304      	movs	r3, #4
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_s_Direction_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4810      	ldr	r0, [pc, #64]	; (8000894 <MX_GPIO_Init+0x12c>)
 8000852:	f001 fc9b 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Prox_B_Pin|Prox_A_Pin;
 8000856:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4808      	ldr	r0, [pc, #32]	; (8000890 <MX_GPIO_Init+0x128>)
 800086e:	f001 fc8d 	bl	800218c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2028      	movs	r0, #40	; 0x28
 8000878:	f001 f84f 	bl	800191a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800087c:	2028      	movs	r0, #40	; 0x28
 800087e:	f001 f868 	bl	8001952 <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020400 	.word	0x40020400
 8000898:	40020800 	.word	0x40020800

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f000 fc7c 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 f84c 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a8:	f7ff ff5e 	bl	8000768 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ac:	f7ff ff3c 	bl	8000728 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008b0:	f000 fb9e 	bl	8000ff0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80008b4:	f000 f9b8 	bl	8000c28 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008b8:	f000 fa0e 	bl	8000cd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008bc:	f000 fa60 	bl	8000d80 <MX_TIM3_Init>
  MX_ADC1_Init();
 80008c0:	f7ff fe9c 	bl	80005fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80008c4:	2104      	movs	r1, #4
 80008c6:	4818      	ldr	r0, [pc, #96]	; (8000928 <main+0x8c>)
 80008c8:	f002 fba3 	bl	8003012 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80008cc:	2104      	movs	r1, #4
 80008ce:	4817      	ldr	r0, [pc, #92]	; (800092c <main+0x90>)
 80008d0:	f002 fb9f 	bl	8003012 <HAL_TIM_Encoder_Start>
  Encoder_init(&Pole_encoder, &htim1, 100);
 80008d4:	2264      	movs	r2, #100	; 0x64
 80008d6:	4914      	ldr	r1, [pc, #80]	; (8000928 <main+0x8c>)
 80008d8:	4815      	ldr	r0, [pc, #84]	; (8000930 <main+0x94>)
 80008da:	f7ff fdfb 	bl	80004d4 <Encoder_init>
  Encoder_init(&Cart_encoder, &htim2, 100);
 80008de:	2264      	movs	r2, #100	; 0x64
 80008e0:	4912      	ldr	r1, [pc, #72]	; (800092c <main+0x90>)
 80008e2:	4814      	ldr	r0, [pc, #80]	; (8000934 <main+0x98>)
 80008e4:	f7ff fdf6 	bl	80004d4 <Encoder_init>
  Proximity_init(&Prox);
 80008e8:	4813      	ldr	r0, [pc, #76]	; (8000938 <main+0x9c>)
 80008ea:	f7ff fe76 	bl	80005da <Proximity_init>

    /* USER CODE BEGIN 3 */
	  static uint32_t timestamp = 0;


	  if(HAL_GetTick()>=timestamp)
 80008ee:	f000 fcbb 	bl	8001268 <HAL_GetTick>
 80008f2:	4602      	mov	r2, r0
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <main+0xa0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d3f8      	bcc.n	80008ee <main+0x52>
	  {
			timestamp = HAL_GetTick() + 10; // 100 hz
 80008fc:	f000 fcb4 	bl	8001268 <HAL_GetTick>
 8000900:	4603      	mov	r3, r0
 8000902:	330a      	adds	r3, #10
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <main+0xa0>)
 8000906:	6013      	str	r3, [r2, #0]
			Pole_pulse2degree(&Pole_encoder);
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <main+0x94>)
 800090a:	f7ff fe2b 	bl	8000564 <Pole_pulse2degree>
			Encoder_getFeedback(&Pole_encoder);
 800090e:	4808      	ldr	r0, [pc, #32]	; (8000930 <main+0x94>)
 8000910:	f7ff fe05 	bl	800051e <Encoder_getFeedback>
			Encoder_getFeedback(&Cart_encoder);
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <main+0x98>)
 8000916:	f7ff fe02 	bl	800051e <Encoder_getFeedback>

			ToSimulink(61, &Pole_encoder, &Cart_encoder);
 800091a:	4a06      	ldr	r2, [pc, #24]	; (8000934 <main+0x98>)
 800091c:	4904      	ldr	r1, [pc, #16]	; (8000930 <main+0x94>)
 800091e:	203d      	movs	r0, #61	; 0x3d
 8000920:	f000 f878 	bl	8000a14 <ToSimulink>
  {
 8000924:	e7e3      	b.n	80008ee <main+0x52>
 8000926:	bf00      	nop
 8000928:	200000ac 	.word	0x200000ac
 800092c:	200000f4 	.word	0x200000f4
 8000930:	20000070 	.word	0x20000070
 8000934:	20000084 	.word	0x20000084
 8000938:	20000098 	.word	0x20000098
 800093c:	200000a8 	.word	0x200000a8

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	; 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f004 f8f6 	bl	8004b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <SystemClock_Config+0xcc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <SystemClock_Config+0xcc>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <SystemClock_Config+0xcc>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <SystemClock_Config+0xd0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <SystemClock_Config+0xd0>)
 800098a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <SystemClock_Config+0xd0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a4:	2310      	movs	r3, #16
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a8:	2302      	movs	r3, #2
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009b0:	2310      	movs	r3, #16
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ba:	2304      	movs	r3, #4
 80009bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009be:	2304      	movs	r3, #4
 80009c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 fd96 	bl	80024f8 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009d2:	f000 f891 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2102      	movs	r1, #2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fff8 	bl	80029e8 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009fe:	f000 f87b 	bl	8000af8 <Error_Handler>
  }
}
 8000a02:	bf00      	nop
 8000a04:	3750      	adds	r7, #80	; 0x50
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <ToSimulink>:

/* USER CODE BEGIN 4 */
void ToSimulink(uint8_t header, Encoder* pole_encoder, Encoder* cart_encoder)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	73fb      	strb	r3, [r7, #15]
	//send low level data to simulink by UART

	/* create data frame START*/
	TxBuffer[0] = header; // header
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <ToSimulink+0x94>)
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	7013      	strb	r3, [r2, #0]
	//pole position
	TxBuffer[1] = pole_encoder->QEI_read & 0xff;
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <ToSimulink+0x94>)
 8000a32:	705a      	strb	r2, [r3, #1]
	TxBuffer[2] = (pole_encoder->QEI_read & 0xff00) >> 8;
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a3a:	121b      	asrs	r3, r3, #8
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <ToSimulink+0x94>)
 8000a40:	709a      	strb	r2, [r3, #2]
	//pole difference position
	TxBuffer[3] = pole_encoder->diff_deg & 0xff;
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <ToSimulink+0x94>)
 8000a4c:	70da      	strb	r2, [r3, #3]
	TxBuffer[4] = (pole_encoder->diff_deg & 0xff00) >> 8;
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000a54:	121b      	asrs	r3, r3, #8
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <ToSimulink+0x94>)
 8000a5a:	711a      	strb	r2, [r3, #4]
	//cart position
	TxBuffer[5] = cart_encoder->QEI_read & 0xff;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <ToSimulink+0x94>)
 8000a66:	715a      	strb	r2, [r3, #5]
	TxBuffer[6] = (cart_encoder->QEI_read & 0xff00) >> 8;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a6e:	121b      	asrs	r3, r3, #8
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <ToSimulink+0x94>)
 8000a74:	719a      	strb	r2, [r3, #6]
	//cart difference position
	TxBuffer[7] = cart_encoder->diff_QEI & 0xff;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <ToSimulink+0x94>)
 8000a80:	71da      	strb	r2, [r3, #7]
	TxBuffer[8] = (cart_encoder->diff_QEI & 0xff00) >> 8;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a88:	121b      	asrs	r3, r3, #8
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <ToSimulink+0x94>)
 8000a8e:	721a      	strb	r2, [r3, #8]

	TxBuffer[9] = 10; // /n
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <ToSimulink+0x94>)
 8000a92:	220a      	movs	r2, #10
 8000a94:	725a      	strb	r2, [r3, #9]
	/* create data frame END*/

	//transmit data
	HAL_UART_Transmit_DMA(&huart2,TxBuffer, 10);
 8000a96:	220a      	movs	r2, #10
 8000a98:	4903      	ldr	r1, [pc, #12]	; (8000aa8 <ToSimulink+0x94>)
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <ToSimulink+0x98>)
 8000a9c:	f003 f83c 	bl	8003b18 <HAL_UART_Transmit_DMA>
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000009c 	.word	0x2000009c
 8000aac:	20000184 	.word	0x20000184

08000ab0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
	/* proximity interrupt START*/
	if (GPIO_Pin == GPIO_PIN_11)// proximity B
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ac0:	d106      	bne.n	8000ad0 <HAL_GPIO_EXTI_Callback+0x20>
	{
		Prox.Prox_B = ~Prox.Prox_B;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ac4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	b25a      	sxtb	r2, r3
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ace:	705a      	strb	r2, [r3, #1]
	}
	if (GPIO_Pin == GPIO_PIN_12)// proximity A
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ad6:	d106      	bne.n	8000ae6 <HAL_GPIO_EXTI_Callback+0x36>
	{
		Prox.Prox_A = ~Prox.Prox_A;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ada:	f993 3000 	ldrsb.w	r3, [r3]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	b25a      	sxtb	r2, r3
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ae4:	701a      	strb	r2, [r3, #0]
	}

}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000098 	.word	0x20000098

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f000 fede 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 fb4e 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <DMA1_Stream6_IRQHandler+0x10>)
 8000bae:	f001 f883 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200001cc 	.word	0x200001cc

08000bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <TIM2_IRQHandler+0x10>)
 8000bc2:	f002 fab4 	bl	800312e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000f4 	.word	0x200000f4

08000bd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <USART2_IRQHandler+0x10>)
 8000bd6:	f003 f80f 	bl	8003bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000184 	.word	0x20000184

08000be4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Prox_B_Pin);
 8000be8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000bec:	f001 fc6c 	bl	80024c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Prox_A_Pin);
 8000bf0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000bf4:	f001 fc68 	bl	80024c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bfc:	f001 fc64 	bl	80024c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	; 0x30
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2224      	movs	r2, #36	; 0x24
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 ff82 	bl	8004b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <MX_TIM1_Init+0xa8>)
 8000c46:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <MX_TIM1_Init+0xac>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_TIM1_Init+0xa8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_TIM1_Init+0xa8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_TIM1_Init+0xa8>)
 8000c58:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000c5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_TIM1_Init+0xa8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_TIM1_Init+0xa8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_TIM1_Init+0xa8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c70:	2303      	movs	r3, #3
 8000c72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_TIM1_Init+0xa8>)
 8000c9c:	f002 f913 	bl	8002ec6 <HAL_TIM_Encoder_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000ca6:	f7ff ff27 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_TIM1_Init+0xa8>)
 8000cb8:	f002 fe5c 	bl	8003974 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000cc2:	f7ff ff19 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	; 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000ac 	.word	0x200000ac
 8000cd4:	40010000 	.word	0x40010000

08000cd8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2224      	movs	r2, #36	; 0x24
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 ff2a 	bl	8004b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d24:	2301      	movs	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d34:	2301      	movs	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d48:	f002 f8bd 	bl	8002ec6 <HAL_TIM_Encoder_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000d52:	f7ff fed1 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d64:	f002 fe06 	bl	8003974 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000d6e:	f7ff fec3 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3730      	adds	r7, #48	; 0x30
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000f4 	.word	0x200000f4

08000d80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <MX_TIM3_Init+0xac>)
 8000da4:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <MX_TIM3_Init+0xb0>)
 8000da6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <MX_TIM3_Init+0xac>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_TIM3_Init+0xac>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_TIM3_Init+0xac>)
 8000db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_TIM3_Init+0xac>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_TIM3_Init+0xac>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dc8:	4818      	ldr	r0, [pc, #96]	; (8000e2c <MX_TIM3_Init+0xac>)
 8000dca:	f002 f82d 	bl	8002e28 <HAL_TIM_PWM_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000dd4:	f7ff fe90 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	4619      	mov	r1, r3
 8000de6:	4811      	ldr	r0, [pc, #68]	; (8000e2c <MX_TIM3_Init+0xac>)
 8000de8:	f002 fdc4 	bl	8003974 <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000df2:	f7ff fe81 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df6:	2360      	movs	r3, #96	; 0x60
 8000df8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	220c      	movs	r2, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM3_Init+0xac>)
 8000e0e:	f002 fa7f 	bl	8003310 <HAL_TIM_PWM_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000e18:	f7ff fe6e 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM3_Init+0xac>)
 8000e1e:	f000 f8ad 	bl	8000f7c <HAL_TIM_MspPostInit>

}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	; 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000013c 	.word	0x2000013c
 8000e30:	40000400 	.word	0x40000400

08000e34 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a36      	ldr	r2, [pc, #216]	; (8000f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12d      	bne.n	8000eb2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a34      	ldr	r2, [pc, #208]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Pole_s_encoder_A_Pin|Pole_s_encoder_B_Pin;
 8000e8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4822      	ldr	r0, [pc, #136]	; (8000f34 <HAL_TIM_Encoder_MspInit+0x100>)
 8000eac:	f001 f96e 	bl	800218c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000eb0:	e038      	b.n	8000f24 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM2)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eba:	d133      	bne.n	8000f24 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_s_encoder_A_Pin|Motor_s_encoder_B_Pin;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4809      	ldr	r0, [pc, #36]	; (8000f34 <HAL_TIM_Encoder_MspInit+0x100>)
 8000f10:	f001 f93c 	bl	800218c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	201c      	movs	r0, #28
 8000f1a:	f000 fcfe 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f1e:	201c      	movs	r0, #28
 8000f20:	f000 fd17 	bl	8001952 <HAL_NVIC_EnableIRQ>
}
 8000f24:	bf00      	nop
 8000f26:	3730      	adds	r7, #48	; 0x30
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000

08000f38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d10d      	bne.n	8000f66 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_TIM_PWM_MspInit+0x40>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_TIM_PWM_MspInit+0x40>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_TIM_PWM_MspInit+0x40>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40000400 	.word	0x40000400
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <HAL_TIM_MspPostInit+0x68>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d11d      	bne.n	8000fda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_TIM_MspPostInit+0x6c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <HAL_TIM_MspPostInit+0x6c>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_TIM_MspPostInit+0x6c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Motor_s_PWM_Pin;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_s_PWM_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <HAL_TIM_MspPostInit+0x70>)
 8000fd6:	f001 f8d9 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3720      	adds	r7, #32
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40000400 	.word	0x40000400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020400 	.word	0x40020400

08000ff0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_USART2_UART_Init+0x50>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8000ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART2_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART2_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001028:	f002 fd26 	bl	8003a78 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001032:	f7ff fd61 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000184 	.word	0x20000184
 8001040:	40004400 	.word	0x40004400

08001044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a34      	ldr	r2, [pc, #208]	; (8001134 <HAL_UART_MspInit+0xf0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d161      	bne.n	800112a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <HAL_UART_MspInit+0xf4>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a32      	ldr	r2, [pc, #200]	; (8001138 <HAL_UART_MspInit+0xf4>)
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <HAL_UART_MspInit+0xf4>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <HAL_UART_MspInit+0xf4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <HAL_UART_MspInit+0xf4>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_UART_MspInit+0xf4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800109e:	230c      	movs	r3, #12
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ae:	2307      	movs	r3, #7
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4820      	ldr	r0, [pc, #128]	; (800113c <HAL_UART_MspInit+0xf8>)
 80010ba:	f001 f867 	bl	800218c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_UART_MspInit+0xfc>)
 80010c0:	4a20      	ldr	r2, [pc, #128]	; (8001144 <HAL_UART_MspInit+0x100>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <HAL_UART_MspInit+0xfc>)
 80010c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_UART_MspInit+0xfc>)
 80010ce:	2240      	movs	r2, #64	; 0x40
 80010d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_UART_MspInit+0xfc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_UART_MspInit+0xfc>)
 80010da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010de:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_UART_MspInit+0xfc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_UART_MspInit+0xfc>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_UART_MspInit+0xfc>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_UART_MspInit+0xfc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_UART_MspInit+0xfc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010fe:	4810      	ldr	r0, [pc, #64]	; (8001140 <HAL_UART_MspInit+0xfc>)
 8001100:	f000 fc42 	bl	8001988 <HAL_DMA_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800110a:	f7ff fcf5 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <HAL_UART_MspInit+0xfc>)
 8001112:	639a      	str	r2, [r3, #56]	; 0x38
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_UART_MspInit+0xfc>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2026      	movs	r0, #38	; 0x26
 8001120:	f000 fbfb 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001124:	2026      	movs	r0, #38	; 0x26
 8001126:	f000 fc14 	bl	8001952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40004400 	.word	0x40004400
 8001138:	40023800 	.word	0x40023800
 800113c:	40020000 	.word	0x40020000
 8001140:	200001cc 	.word	0x200001cc
 8001144:	400260a0 	.word	0x400260a0

08001148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800114c:	f7ff fd5a 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	; (8001188 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	; (8001194 <LoopFillZerobss+0x22>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001176:	f003 fceb 	bl	8004b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117a:	f7ff fb8f 	bl	800089c <main>
  bx  lr    
 800117e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800118c:	08004be0 	.word	0x08004be0
  ldr r2, =_sbss
 8001190:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001194:	20000230 	.word	0x20000230

08001198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <HAL_Init+0x40>)
 80011a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <HAL_Init+0x40>)
 80011b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a07      	ldr	r2, [pc, #28]	; (80011dc <HAL_Init+0x40>)
 80011be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 fb9d 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 f808 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d0:	f7ff fc98 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023c00 	.word	0x40023c00

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_InitTick+0x54>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x58>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fbb5 	bl	800196e <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e00e      	b.n	800122c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d80a      	bhi.n	800122a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f000 fb7d 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <HAL_InitTick+0x5c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000000 	.word	0x20000000
 8001238:	20000008 	.word	0x20000008
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x20>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x24>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_IncTick+0x24>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008
 8001264:	2000022c 	.word	0x2000022c

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_GetTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2000022c 	.word	0x2000022c

08001280 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e033      	b.n	80012fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff f9fe 	bl	80006a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d118      	bne.n	80012f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012c6:	f023 0302 	bic.w	r3, r3, #2
 80012ca:	f043 0202 	orr.w	r2, r3, #2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f94a 	bl	800156c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f023 0303 	bic.w	r3, r3, #3
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
 80012ee:	e001      	b.n	80012f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x1c>
 8001320:	2302      	movs	r3, #2
 8001322:	e113      	b.n	800154c <HAL_ADC_ConfigChannel+0x244>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b09      	cmp	r3, #9
 8001332:	d925      	bls.n	8001380 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68d9      	ldr	r1, [r3, #12]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3b1e      	subs	r3, #30
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43da      	mvns	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	400a      	ands	r2, r1
 8001358:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68d9      	ldr	r1, [r3, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	4603      	mov	r3, r0
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4403      	add	r3, r0
 8001372:	3b1e      	subs	r3, #30
 8001374:	409a      	lsls	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	e022      	b.n	80013c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6919      	ldr	r1, [r3, #16]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	2207      	movs	r2, #7
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6919      	ldr	r1, [r3, #16]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4403      	add	r3, r0
 80013bc:	409a      	lsls	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d824      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b05      	subs	r3, #5
 80013e0:	221f      	movs	r2, #31
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b05      	subs	r3, #5
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
 8001416:	e04c      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d824      	bhi.n	800146a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b23      	subs	r3, #35	; 0x23
 8001432:	221f      	movs	r2, #31
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43da      	mvns	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	400a      	ands	r2, r1
 8001440:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b23      	subs	r3, #35	; 0x23
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	e023      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3b41      	subs	r3, #65	; 0x41
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b41      	subs	r3, #65	; 0x41
 80014a6:	fa00 f203 	lsl.w	r2, r0, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_ADC_ConfigChannel+0x250>)
 80014b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a28      	ldr	r2, [pc, #160]	; (800155c <HAL_ADC_ConfigChannel+0x254>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d10f      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1d8>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d10b      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_ADC_ConfigChannel+0x254>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12b      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <HAL_ADC_ConfigChannel+0x258>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d003      	beq.n	80014fc <HAL_ADC_ConfigChannel+0x1f4>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b11      	cmp	r3, #17
 80014fa:	d122      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_ADC_ConfigChannel+0x258>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d111      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_ADC_ConfigChannel+0x25c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_ADC_ConfigChannel+0x260>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9a      	lsrs	r2, r3, #18
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001534:	e002      	b.n	800153c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3b01      	subs	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f9      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40012300 	.word	0x40012300
 800155c:	40012000 	.word	0x40012000
 8001560:	10000012 	.word	0x10000012
 8001564:	20000000 	.word	0x20000000
 8001568:	431bde83 	.word	0x431bde83

0800156c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001574:	4b79      	ldr	r3, [pc, #484]	; (800175c <ADC_Init+0x1f0>)
 8001576:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	431a      	orrs	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	021a      	lsls	r2, r3, #8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6899      	ldr	r1, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	4a58      	ldr	r2, [pc, #352]	; (8001760 <ADC_Init+0x1f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d022      	beq.n	800164a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001612:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e00f      	b.n	800166a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001658:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001668:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0202 	bic.w	r2, r2, #2
 8001678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6899      	ldr	r1, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e1b      	ldrb	r3, [r3, #24]
 8001684:	005a      	lsls	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01b      	beq.n	80016d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6859      	ldr	r1, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	3b01      	subs	r3, #1
 80016c4:	035a      	lsls	r2, r3, #13
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	e007      	b.n	80016e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	051a      	lsls	r2, r3, #20
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001722:	025a      	lsls	r2, r3, #9
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800173a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6899      	ldr	r1, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	029a      	lsls	r2, r3, #10
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	609a      	str	r2, [r3, #8]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40012300 	.word	0x40012300
 8001760:	0f000001 	.word	0x0f000001

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff8e 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff29 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192c:	f7ff ff3e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff8e 	bl	8001858 <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5d 	bl	8001804 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff31 	bl	80017c8 <__NVIC_EnableIRQ>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffa2 	bl	80018c0 <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff fc68 	bl	8001268 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e099      	b.n	8001ad8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0201 	bic.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c4:	e00f      	b.n	80019e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019c6:	f7ff fc4f 	bl	8001268 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d908      	bls.n	80019e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2220      	movs	r2, #32
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2203      	movs	r2, #3
 80019de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e078      	b.n	8001ad8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1e8      	bne.n	80019c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <HAL_DMA_Init+0x158>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d107      	bne.n	8001a50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f023 0307 	bic.w	r3, r3, #7
 8001a66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d117      	bne.n	8001aaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00e      	beq.n	8001aaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fb01 	bl	8002094 <DMA_CheckFifoParam>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2240      	movs	r2, #64	; 0x40
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e016      	b.n	8001ad8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fab8 	bl	8002028 <DMA_CalcBaseAndBitshift>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac0:	223f      	movs	r2, #63	; 0x3f
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	f010803f 	.word	0xf010803f

08001ae4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_DMA_Start_IT+0x26>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e040      	b.n	8001b8c <HAL_DMA_Start_IT+0xa8>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d12f      	bne.n	8001b7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2202      	movs	r2, #2
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 fa4a 	bl	8001fcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	223f      	movs	r2, #63	; 0x3f
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0216 	orr.w	r2, r2, #22
 8001b52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0208 	orr.w	r2, r2, #8
 8001b6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e005      	b.n	8001b8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b86:	2302      	movs	r3, #2
 8001b88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ba2:	f7ff fb61 	bl	8001268 <HAL_GetTick>
 8001ba6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d008      	beq.n	8001bc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e052      	b.n	8001c6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0216 	bic.w	r2, r2, #22
 8001bd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695a      	ldr	r2, [r3, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d103      	bne.n	8001bf6 <HAL_DMA_Abort+0x62>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0208 	bic.w	r2, r2, #8
 8001c04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c16:	e013      	b.n	8001c40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c18:	f7ff fb26 	bl	8001268 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d90c      	bls.n	8001c40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e015      	b.n	8001c6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1e4      	bne.n	8001c18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	223f      	movs	r2, #63	; 0x3f
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d004      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00c      	b.n	8001cac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2205      	movs	r2, #5
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cc4:	4b8e      	ldr	r3, [pc, #568]	; (8001f00 <HAL_DMA_IRQHandler+0x248>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a8e      	ldr	r2, [pc, #568]	; (8001f04 <HAL_DMA_IRQHandler+0x24c>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0a9b      	lsrs	r3, r3, #10
 8001cd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01a      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0204 	bic.w	r2, r2, #4
 8001d0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2208      	movs	r2, #8
 8001d12:	409a      	lsls	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d28:	2201      	movs	r2, #1
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d012      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	2201      	movs	r2, #1
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f043 0202 	orr.w	r2, r3, #2
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2204      	movs	r2, #4
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d012      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00b      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f043 0204 	orr.w	r2, r3, #4
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2210      	movs	r2, #16
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d043      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03c      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	2210      	movs	r2, #16
 8001db4:	409a      	lsls	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d024      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
 8001de6:	e01f      	b.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
 8001df8:	e016      	b.n	8001e28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0208 	bic.w	r2, r2, #8
 8001e16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 808f 	beq.w	8001f58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8087 	beq.w	8001f58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	2220      	movs	r2, #32
 8001e50:	409a      	lsls	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d136      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0216 	bic.w	r2, r2, #22
 8001e70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <HAL_DMA_IRQHandler+0x1da>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0208 	bic.w	r2, r2, #8
 8001ea0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	223f      	movs	r2, #63	; 0x3f
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d07e      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
        }
        return;
 8001ece:	e079      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01d      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d031      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
 8001efc:	e02c      	b.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
 8001efe:	bf00      	nop
 8001f00:	20000000 	.word	0x20000000
 8001f04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d023      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
 8001f18:	e01e      	b.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10f      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0210 	bic.w	r2, r2, #16
 8001f36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d032      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2205      	movs	r2, #5
 8001f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	3301      	adds	r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d307      	bcc.n	8001fa0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f2      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x2cc>
 8001f9e:	e000      	b.n	8001fa2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fa0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
 8001fc2:	e000      	b.n	8001fc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fc4:	bf00      	nop
    }
  }
}
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d108      	bne.n	800200c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800200a:	e007      	b.n	800201c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	60da      	str	r2, [r3, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3b10      	subs	r3, #16
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <DMA_CalcBaseAndBitshift+0x64>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <DMA_CalcBaseAndBitshift+0x68>)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d909      	bls.n	800206a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	1d1a      	adds	r2, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	659a      	str	r2, [r3, #88]	; 0x58
 8002068:	e007      	b.n	800207a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	aaaaaaab 	.word	0xaaaaaaab
 8002090:	08004bc8 	.word	0x08004bc8

08002094 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d11f      	bne.n	80020ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d856      	bhi.n	8002162 <DMA_CheckFifoParam+0xce>
 80020b4:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <DMA_CheckFifoParam+0x28>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	080020df 	.word	0x080020df
 80020c4:	080020cd 	.word	0x080020cd
 80020c8:	08002163 	.word	0x08002163
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d046      	beq.n	8002166 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020dc:	e043      	b.n	8002166 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020e6:	d140      	bne.n	800216a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ec:	e03d      	b.n	800216a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f6:	d121      	bne.n	800213c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d837      	bhi.n	800216e <DMA_CheckFifoParam+0xda>
 80020fe:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <DMA_CheckFifoParam+0x70>)
 8002100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002104:	08002115 	.word	0x08002115
 8002108:	0800211b 	.word	0x0800211b
 800210c:	08002115 	.word	0x08002115
 8002110:	0800212d 	.word	0x0800212d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
      break;
 8002118:	e030      	b.n	800217c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d025      	beq.n	8002172 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800212a:	e022      	b.n	8002172 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002134:	d11f      	bne.n	8002176 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800213a:	e01c      	b.n	8002176 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d903      	bls.n	800214a <DMA_CheckFifoParam+0xb6>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d003      	beq.n	8002150 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002148:	e018      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
      break;
 800214e:	e015      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00e      	beq.n	800217a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      break;
 8002160:	e00b      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 8002162:	bf00      	nop
 8002164:	e00a      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;
 8002166:	bf00      	nop
 8002168:	e008      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;
 800216a:	bf00      	nop
 800216c:	e006      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;
 800216e:	bf00      	nop
 8002170:	e004      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;
 8002172:	bf00      	nop
 8002174:	e002      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;   
 8002176:	bf00      	nop
 8002178:	e000      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;
 800217a:	bf00      	nop
    }
  } 
  
  return status; 
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e159      	b.n	800245c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8148 	bne.w	8002456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d005      	beq.n	80021de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d130      	bne.n	8002240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 0201 	and.w	r2, r3, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b03      	cmp	r3, #3
 800224a:	d017      	beq.n	800227c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d123      	bne.n	80022d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a2 	beq.w	8002456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b57      	ldr	r3, [pc, #348]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a56      	ldr	r2, [pc, #344]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b54      	ldr	r3, [pc, #336]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232e:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_GPIO_Init+0x2ec>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a49      	ldr	r2, [pc, #292]	; (800247c <HAL_GPIO_Init+0x2f0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d019      	beq.n	800238e <HAL_GPIO_Init+0x202>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a48      	ldr	r2, [pc, #288]	; (8002480 <HAL_GPIO_Init+0x2f4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x1fe>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a47      	ldr	r2, [pc, #284]	; (8002484 <HAL_GPIO_Init+0x2f8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_Init+0x1fa>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a46      	ldr	r2, [pc, #280]	; (8002488 <HAL_GPIO_Init+0x2fc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x1f6>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a45      	ldr	r2, [pc, #276]	; (800248c <HAL_GPIO_Init+0x300>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_Init+0x1f2>
 800237a:	2304      	movs	r3, #4
 800237c:	e008      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800237e:	2307      	movs	r3, #7
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x204>
 8002382:	2303      	movs	r3, #3
 8002384:	e004      	b.n	8002390 <HAL_GPIO_Init+0x204>
 8002386:	2302      	movs	r3, #2
 8002388:	e002      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800238e:	2300      	movs	r3, #0
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f002 0203 	and.w	r2, r2, #3
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	4093      	lsls	r3, r2
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a0:	4935      	ldr	r1, [pc, #212]	; (8002478 <HAL_GPIO_Init+0x2ec>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ae:	4b38      	ldr	r3, [pc, #224]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d2:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023fc:	4a24      	ldr	r2, [pc, #144]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_GPIO_Init+0x304>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3301      	adds	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b0f      	cmp	r3, #15
 8002460:	f67f aea2 	bls.w	80021a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	40013800 	.word	0x40013800
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020800 	.word	0x40020800
 8002488:	40020c00 	.word	0x40020c00
 800248c:	40021000 	.word	0x40021000
 8002490:	40013c00 	.word	0x40013c00

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a4:	787b      	ldrb	r3, [r7, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b0:	e003      	b.n	80024ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	041a      	lsls	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024de:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fae2 	bl	8000ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40013c00 	.word	0x40013c00

080024f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e267      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d075      	beq.n	8002602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002516:	4b88      	ldr	r3, [pc, #544]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b04      	cmp	r3, #4
 8002520:	d00c      	beq.n	800253c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800252a:	2b08      	cmp	r3, #8
 800252c:	d112      	bne.n	8002554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252e:	4b82      	ldr	r3, [pc, #520]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800253a:	d10b      	bne.n	8002554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	4b7e      	ldr	r3, [pc, #504]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d05b      	beq.n	8002600 <HAL_RCC_OscConfig+0x108>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d157      	bne.n	8002600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e242      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255c:	d106      	bne.n	800256c <HAL_RCC_OscConfig+0x74>
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a75      	ldr	r2, [pc, #468]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e01d      	b.n	80025a8 <HAL_RCC_OscConfig+0xb0>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x98>
 8002576:	4b70      	ldr	r3, [pc, #448]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6f      	ldr	r2, [pc, #444]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6c      	ldr	r2, [pc, #432]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_OscConfig+0xb0>
 8002590:	4b69      	ldr	r3, [pc, #420]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a68      	ldr	r2, [pc, #416]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b66      	ldr	r3, [pc, #408]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a65      	ldr	r2, [pc, #404]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fe5a 	bl	8001268 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fe56 	bl	8001268 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e207      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b5b      	ldr	r3, [pc, #364]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0xc0>
 80025d6:	e014      	b.n	8002602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fe46 	bl	8001268 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fe42 	bl	8001268 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1f3      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	4b51      	ldr	r3, [pc, #324]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0xe8>
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d063      	beq.n	80026d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800260e:	4b4a      	ldr	r3, [pc, #296]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002622:	2b08      	cmp	r3, #8
 8002624:	d11c      	bne.n	8002660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002626:	4b44      	ldr	r3, [pc, #272]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d116      	bne.n	8002660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_RCC_OscConfig+0x152>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e1c7      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4937      	ldr	r1, [pc, #220]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265e:	e03a      	b.n	80026d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002668:	4b34      	ldr	r3, [pc, #208]	; (800273c <HAL_RCC_OscConfig+0x244>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fdfb 	bl	8001268 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002676:	f7fe fdf7 	bl	8001268 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e1a8      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4925      	ldr	r1, [pc, #148]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
 80026a8:	e015      	b.n	80026d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCC_OscConfig+0x244>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fdda 	bl	8001268 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b8:	f7fe fdd6 	bl	8001268 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e187      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d036      	beq.n	8002750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d016      	beq.n	8002718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_RCC_OscConfig+0x248>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7fe fdba 	bl	8001268 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe fdb6 	bl	8001268 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e167      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_OscConfig+0x240>)
 800270c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x200>
 8002716:	e01b      	b.n	8002750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCC_OscConfig+0x248>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271e:	f7fe fda3 	bl	8001268 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	e00e      	b.n	8002744 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002726:	f7fe fd9f 	bl	8001268 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d907      	bls.n	8002744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e150      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
 8002738:	40023800 	.word	0x40023800
 800273c:	42470000 	.word	0x42470000
 8002740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1ea      	bne.n	8002726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8097 	beq.w	800288c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002762:	4b81      	ldr	r3, [pc, #516]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10f      	bne.n	800278e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	4b7d      	ldr	r3, [pc, #500]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a7c      	ldr	r2, [pc, #496]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b7a      	ldr	r3, [pc, #488]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b77      	ldr	r3, [pc, #476]	; (800296c <HAL_RCC_OscConfig+0x474>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279a:	4b74      	ldr	r3, [pc, #464]	; (800296c <HAL_RCC_OscConfig+0x474>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a73      	ldr	r2, [pc, #460]	; (800296c <HAL_RCC_OscConfig+0x474>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a6:	f7fe fd5f 	bl	8001268 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7fe fd5b 	bl	8001268 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e10c      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4b6a      	ldr	r3, [pc, #424]	; (800296c <HAL_RCC_OscConfig+0x474>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x2ea>
 80027d4:	4b64      	ldr	r3, [pc, #400]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a63      	ldr	r2, [pc, #396]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	e01c      	b.n	800281c <HAL_RCC_OscConfig+0x324>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x30c>
 80027ea:	4b5f      	ldr	r3, [pc, #380]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a5e      	ldr	r2, [pc, #376]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
 80027f6:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a5b      	ldr	r2, [pc, #364]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6713      	str	r3, [r2, #112]	; 0x70
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0x324>
 8002804:	4b58      	ldr	r3, [pc, #352]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	4a57      	ldr	r2, [pc, #348]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	; 0x70
 8002810:	4b55      	ldr	r3, [pc, #340]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a54      	ldr	r2, [pc, #336]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002816:	f023 0304 	bic.w	r3, r3, #4
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d015      	beq.n	8002850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fd20 	bl	8001268 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	e00a      	b.n	8002842 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282c:	f7fe fd1c 	bl	8001268 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e0cb      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002842:	4b49      	ldr	r3, [pc, #292]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0ee      	beq.n	800282c <HAL_RCC_OscConfig+0x334>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002850:	f7fe fd0a 	bl	8001268 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002856:	e00a      	b.n	800286e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe fd06 	bl	8001268 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0b5      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286e:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ee      	bne.n	8002858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002880:	4b39      	ldr	r3, [pc, #228]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	4a38      	ldr	r2, [pc, #224]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a1 	beq.w	80029d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002896:	4b34      	ldr	r3, [pc, #208]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d05c      	beq.n	800295c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d141      	bne.n	800292e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_RCC_OscConfig+0x478>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe fcda 	bl	8001268 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe fcd6 	bl	8001268 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e087      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	4b27      	ldr	r3, [pc, #156]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69da      	ldr	r2, [r3, #28]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	019b      	lsls	r3, r3, #6
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	3b01      	subs	r3, #1
 80028f0:	041b      	lsls	r3, r3, #16
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	491b      	ldr	r1, [pc, #108]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCC_OscConfig+0x478>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe fcaf 	bl	8001268 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe fcab 	bl	8001268 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e05c      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x416>
 800292c:	e054      	b.n	80029d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_RCC_OscConfig+0x478>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fc98 	bl	8001268 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293c:	f7fe fc94 	bl	8001268 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e045      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_RCC_OscConfig+0x470>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x444>
 800295a:	e03d      	b.n	80029d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e038      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
 8002968:	40023800 	.word	0x40023800
 800296c:	40007000 	.word	0x40007000
 8002970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCC_OscConfig+0x4ec>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d028      	beq.n	80029d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d121      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d11a      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a4:	4013      	ands	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d111      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	3b01      	subs	r3, #1
 80029be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800

080029e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0cc      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029fc:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d90c      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b63      	ldr	r3, [pc, #396]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0b8      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d020      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a3c:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a58      	ldr	r2, [pc, #352]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a54:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a52      	ldr	r2, [pc, #328]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a60:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	494d      	ldr	r1, [pc, #308]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d044      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d119      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e07f      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa6:	4b3f      	ldr	r3, [pc, #252]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e06f      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab6:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e067      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac6:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f023 0203 	bic.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4934      	ldr	r1, [pc, #208]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fbc6 	bl	8001268 <HAL_GetTick>
 8002adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae0:	f7fe fbc2 	bl	8001268 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e04f      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 020c 	and.w	r2, r3, #12
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d1eb      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d20c      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e032      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4916      	ldr	r1, [pc, #88]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b6e:	f000 f821 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	490a      	ldr	r1, [pc, #40]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	5ccb      	ldrb	r3, [r1, r3]
 8002b82:	fa22 f303 	lsr.w	r3, r2, r3
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fb26 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023c00 	.word	0x40023c00
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	08004bb0 	.word	0x08004bb0
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000004 	.word	0x20000004

08002bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb8:	b094      	sub	sp, #80	; 0x50
 8002bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bcc:	4b79      	ldr	r3, [pc, #484]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	f200 80e1 	bhi.w	8002da0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x34>
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x3a>
 8002be6:	e0db      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be8:	4b73      	ldr	r3, [pc, #460]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bec:	e0db      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bee:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x208>)
 8002bf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bf2:	e0d8      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf4:	4b6f      	ldr	r3, [pc, #444]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bfe:	4b6d      	ldr	r3, [pc, #436]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d063      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0a:	4b6a      	ldr	r3, [pc, #424]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	2200      	movs	r2, #0
 8002c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c1e:	2300      	movs	r3, #0
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34
 8002c22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c26:	4622      	mov	r2, r4
 8002c28:	462b      	mov	r3, r5
 8002c2a:	f04f 0000 	mov.w	r0, #0
 8002c2e:	f04f 0100 	mov.w	r1, #0
 8002c32:	0159      	lsls	r1, r3, #5
 8002c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c38:	0150      	lsls	r0, r2, #5
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4621      	mov	r1, r4
 8002c40:	1a51      	subs	r1, r2, r1
 8002c42:	6139      	str	r1, [r7, #16]
 8002c44:	4629      	mov	r1, r5
 8002c46:	eb63 0301 	sbc.w	r3, r3, r1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c58:	4659      	mov	r1, fp
 8002c5a:	018b      	lsls	r3, r1, #6
 8002c5c:	4651      	mov	r1, sl
 8002c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c62:	4651      	mov	r1, sl
 8002c64:	018a      	lsls	r2, r1, #6
 8002c66:	4651      	mov	r1, sl
 8002c68:	ebb2 0801 	subs.w	r8, r2, r1
 8002c6c:	4659      	mov	r1, fp
 8002c6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c86:	4690      	mov	r8, r2
 8002c88:	4699      	mov	r9, r3
 8002c8a:	4623      	mov	r3, r4
 8002c8c:	eb18 0303 	adds.w	r3, r8, r3
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	462b      	mov	r3, r5
 8002c94:	eb49 0303 	adc.w	r3, r9, r3
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	024b      	lsls	r3, r1, #9
 8002caa:	4621      	mov	r1, r4
 8002cac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	024a      	lsls	r2, r1, #9
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cba:	2200      	movs	r2, #0
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cc4:	f7fd fa88 	bl	80001d8 <__aeabi_uldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd0:	e058      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd2:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	099b      	lsrs	r3, r3, #6
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	4611      	mov	r1, r2
 8002cde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ce2:	623b      	str	r3, [r7, #32]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cec:	4642      	mov	r2, r8
 8002cee:	464b      	mov	r3, r9
 8002cf0:	f04f 0000 	mov.w	r0, #0
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	0159      	lsls	r1, r3, #5
 8002cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cfe:	0150      	lsls	r0, r2, #5
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4641      	mov	r1, r8
 8002d06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d24:	ebb2 040a 	subs.w	r4, r2, sl
 8002d28:	eb63 050b 	sbc.w	r5, r3, fp
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	00eb      	lsls	r3, r5, #3
 8002d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d3a:	00e2      	lsls	r2, r4, #3
 8002d3c:	4614      	mov	r4, r2
 8002d3e:	461d      	mov	r5, r3
 8002d40:	4643      	mov	r3, r8
 8002d42:	18e3      	adds	r3, r4, r3
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	464b      	mov	r3, r9
 8002d48:	eb45 0303 	adc.w	r3, r5, r3
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	028b      	lsls	r3, r1, #10
 8002d5e:	4621      	mov	r1, r4
 8002d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d64:	4621      	mov	r1, r4
 8002d66:	028a      	lsls	r2, r1, #10
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6e:	2200      	movs	r2, #0
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	61fa      	str	r2, [r7, #28]
 8002d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d78:	f7fd fa2e 	bl	80001d8 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4613      	mov	r3, r2
 8002d82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d9e:	e002      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002da2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3750      	adds	r7, #80	; 0x50
 8002dac:	46bd      	mov	sp, r7
 8002dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	00f42400 	.word	0x00f42400
 8002dbc:	007a1200 	.word	0x007a1200

08002dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ddc:	f7ff fff0 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	0a9b      	lsrs	r3, r3, #10
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4903      	ldr	r1, [pc, #12]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	08004bc0 	.word	0x08004bc0

08002e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e04:	f7ff ffdc 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0b5b      	lsrs	r3, r3, #13
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	08004bc0 	.word	0x08004bc0

08002e28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e041      	b.n	8002ebe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe f872 	bl	8000f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f000 fb46 	bl	80034f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e097      	b.n	800300a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fd ffa0 	bl	8000e34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f000 faec 	bl	80034f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f48:	f023 0303 	bic.w	r3, r3, #3
 8002f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f66:	f023 030c 	bic.w	r3, r3, #12
 8002f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	4313      	orrs	r3, r2
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	011a      	lsls	r2, r3, #4
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	031b      	lsls	r3, r3, #12
 8002f96:	4313      	orrs	r3, r2
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002fa4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002fac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003022:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800302a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003032:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800303a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d110      	bne.n	8003064 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d102      	bne.n	800304e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003048:	7b7b      	ldrb	r3, [r7, #13]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d001      	beq.n	8003052 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e069      	b.n	8003126 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2202      	movs	r2, #2
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003062:	e031      	b.n	80030c8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b04      	cmp	r3, #4
 8003068:	d110      	bne.n	800308c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800306a:	7bbb      	ldrb	r3, [r7, #14]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d102      	bne.n	8003076 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003070:	7b3b      	ldrb	r3, [r7, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e055      	b.n	8003126 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2202      	movs	r2, #2
 8003086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800308a:	e01d      	b.n	80030c8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d108      	bne.n	80030a4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003092:	7bbb      	ldrb	r3, [r7, #14]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d105      	bne.n	80030a4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003098:	7b7b      	ldrb	r3, [r7, #13]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d102      	bne.n	80030a4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800309e:	7b3b      	ldrb	r3, [r7, #12]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d001      	beq.n	80030a8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e03e      	b.n	8003126 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_Encoder_Start+0xc4>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d008      	beq.n	80030e6 <HAL_TIM_Encoder_Start+0xd4>
 80030d4:	e00f      	b.n	80030f6 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2201      	movs	r2, #1
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fc22 	bl	8003928 <TIM_CCxChannelCmd>
      break;
 80030e4:	e016      	b.n	8003114 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2201      	movs	r2, #1
 80030ec:	2104      	movs	r1, #4
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fc1a 	bl	8003928 <TIM_CCxChannelCmd>
      break;
 80030f4:	e00e      	b.n	8003114 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fc12 	bl	8003928 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2201      	movs	r2, #1
 800310a:	2104      	movs	r1, #4
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fc0b 	bl	8003928 <TIM_CCxChannelCmd>
      break;
 8003112:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01b      	beq.n	8003192 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 0202 	mvn.w	r2, #2
 8003162:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f99f 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 800317e:	e005      	b.n	800318c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f991 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f9a2 	bl	80034d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d020      	beq.n	80031de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01b      	beq.n	80031de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f06f 0204 	mvn.w	r2, #4
 80031ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f979 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 80031ca:	e005      	b.n	80031d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f96b 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f97c 	bl	80034d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d020      	beq.n	800322a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01b      	beq.n	800322a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f06f 0208 	mvn.w	r2, #8
 80031fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2204      	movs	r2, #4
 8003200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f953 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 8003216:	e005      	b.n	8003224 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f945 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f956 	bl	80034d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01b      	beq.n	8003276 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0210 	mvn.w	r2, #16
 8003246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2208      	movs	r2, #8
 800324c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f92d 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 8003262:	e005      	b.n	8003270 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f91f 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f930 	bl	80034d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00c      	beq.n	800329a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f06f 0201 	mvn.w	r2, #1
 8003292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f8fd 	bl	8003494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fbd3 	bl	8003a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00c      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f901 	bl	80034e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00c      	beq.n	8003306 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f06f 0220 	mvn.w	r2, #32
 80032fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fba5 	bl	8003a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800332a:	2302      	movs	r3, #2
 800332c:	e0ae      	b.n	800348c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b0c      	cmp	r3, #12
 800333a:	f200 809f 	bhi.w	800347c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	08003379 	.word	0x08003379
 8003348:	0800347d 	.word	0x0800347d
 800334c:	0800347d 	.word	0x0800347d
 8003350:	0800347d 	.word	0x0800347d
 8003354:	080033b9 	.word	0x080033b9
 8003358:	0800347d 	.word	0x0800347d
 800335c:	0800347d 	.word	0x0800347d
 8003360:	0800347d 	.word	0x0800347d
 8003364:	080033fb 	.word	0x080033fb
 8003368:	0800347d 	.word	0x0800347d
 800336c:	0800347d 	.word	0x0800347d
 8003370:	0800347d 	.word	0x0800347d
 8003374:	0800343b 	.word	0x0800343b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f946 	bl	8003610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0208 	orr.w	r2, r2, #8
 8003392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0204 	bic.w	r2, r2, #4
 80033a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6999      	ldr	r1, [r3, #24]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	619a      	str	r2, [r3, #24]
      break;
 80033b6:	e064      	b.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f98c 	bl	80036dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6999      	ldr	r1, [r3, #24]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	021a      	lsls	r2, r3, #8
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	619a      	str	r2, [r3, #24]
      break;
 80033f8:	e043      	b.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f9d7 	bl	80037b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0208 	orr.w	r2, r2, #8
 8003414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0204 	bic.w	r2, r2, #4
 8003424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69d9      	ldr	r1, [r3, #28]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	61da      	str	r2, [r3, #28]
      break;
 8003438:	e023      	b.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fa21 	bl	8003888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69d9      	ldr	r1, [r3, #28]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	021a      	lsls	r2, r3, #8
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	61da      	str	r2, [r3, #28]
      break;
 800347a:	e002      	b.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	75fb      	strb	r3, [r7, #23]
      break;
 8003480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800348a:	7dfb      	ldrb	r3, [r7, #23]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3a      	ldr	r2, [pc, #232]	; (80035f4 <TIM_Base_SetConfig+0xfc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00f      	beq.n	8003530 <TIM_Base_SetConfig+0x38>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d00b      	beq.n	8003530 <TIM_Base_SetConfig+0x38>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a37      	ldr	r2, [pc, #220]	; (80035f8 <TIM_Base_SetConfig+0x100>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d007      	beq.n	8003530 <TIM_Base_SetConfig+0x38>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a36      	ldr	r2, [pc, #216]	; (80035fc <TIM_Base_SetConfig+0x104>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <TIM_Base_SetConfig+0x38>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a35      	ldr	r2, [pc, #212]	; (8003600 <TIM_Base_SetConfig+0x108>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d108      	bne.n	8003542 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <TIM_Base_SetConfig+0xfc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01b      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003550:	d017      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <TIM_Base_SetConfig+0x100>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a27      	ldr	r2, [pc, #156]	; (80035fc <TIM_Base_SetConfig+0x104>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00f      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a26      	ldr	r2, [pc, #152]	; (8003600 <TIM_Base_SetConfig+0x108>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00b      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a25      	ldr	r2, [pc, #148]	; (8003604 <TIM_Base_SetConfig+0x10c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d007      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a24      	ldr	r2, [pc, #144]	; (8003608 <TIM_Base_SetConfig+0x110>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d003      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a23      	ldr	r2, [pc, #140]	; (800360c <TIM_Base_SetConfig+0x114>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <TIM_Base_SetConfig+0xfc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d103      	bne.n	80035c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d105      	bne.n	80035e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f023 0201 	bic.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	611a      	str	r2, [r3, #16]
  }
}
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800
 8003600:	40000c00 	.word	0x40000c00
 8003604:	40014000 	.word	0x40014000
 8003608:	40014400 	.word	0x40014400
 800360c:	40014800 	.word	0x40014800

08003610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f023 0201 	bic.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0303 	bic.w	r3, r3, #3
 8003646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f023 0302 	bic.w	r3, r3, #2
 8003658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <TIM_OC1_SetConfig+0xc8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10c      	bne.n	8003686 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0308 	bic.w	r3, r3, #8
 8003672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <TIM_OC1_SetConfig+0xc8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d111      	bne.n	80036b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800369c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	621a      	str	r2, [r3, #32]
}
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40010000 	.word	0x40010000

080036dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f023 0210 	bic.w	r2, r3, #16
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f023 0320 	bic.w	r3, r3, #32
 8003726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <TIM_OC2_SetConfig+0xd4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10d      	bne.n	8003758 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <TIM_OC2_SetConfig+0xd4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d113      	bne.n	8003788 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	621a      	str	r2, [r3, #32]
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000

080037b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <TIM_OC3_SetConfig+0xd0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10d      	bne.n	800382e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <TIM_OC3_SetConfig+0xd0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d113      	bne.n	800385e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800383c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	621a      	str	r2, [r3, #32]
}
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40010000 	.word	0x40010000

08003888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	021b      	lsls	r3, r3, #8
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	031b      	lsls	r3, r3, #12
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a10      	ldr	r2, [pc, #64]	; (8003924 <TIM_OC4_SetConfig+0x9c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d109      	bne.n	80038fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	019b      	lsls	r3, r3, #6
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	621a      	str	r2, [r3, #32]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40010000 	.word	0x40010000

08003928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2201      	movs	r2, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1a      	ldr	r2, [r3, #32]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	43db      	mvns	r3, r3
 800394a:	401a      	ands	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1a      	ldr	r2, [r3, #32]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	431a      	orrs	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003988:	2302      	movs	r3, #2
 800398a:	e050      	b.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d018      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d8:	d013      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00e      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d009      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10c      	bne.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40010000 	.word	0x40010000
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800
 8003a48:	40000c00 	.word	0x40000c00
 8003a4c:	40014000 	.word	0x40014000

08003a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e042      	b.n	8003b10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fad0 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fdcb 	bl	8004658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	; 0x30
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	4613      	mov	r3, r2
 8003b24:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	d156      	bne.n	8003be0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_UART_Transmit_DMA+0x26>
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e04f      	b.n	8003be2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2221      	movs	r2, #33	; 0x21
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	4a21      	ldr	r2, [pc, #132]	; (8003bec <HAL_UART_Transmit_DMA+0xd4>)
 8003b68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	4a20      	ldr	r2, [pc, #128]	; (8003bf0 <HAL_UART_Transmit_DMA+0xd8>)
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <HAL_UART_Transmit_DMA+0xdc>)
 8003b78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	2200      	movs	r2, #0
 8003b80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003b82:	f107 0308 	add.w	r3, r7, #8
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	6819      	ldr	r1, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3304      	adds	r3, #4
 8003b96:	461a      	mov	r2, r3
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	f7fd ffa3 	bl	8001ae4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ba6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3314      	adds	r3, #20
 8003bae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	617b      	str	r3, [r7, #20]
   return(result);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc8:	627a      	str	r2, [r7, #36]	; 0x24
 8003bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6a39      	ldr	r1, [r7, #32]
 8003bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3730      	adds	r7, #48	; 0x30
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	08004185 	.word	0x08004185
 8003bf0:	0800421f 	.word	0x0800421f
 8003bf4:	0800423b 	.word	0x0800423b

08003bf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b0ba      	sub	sp, #232	; 0xe8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10f      	bne.n	8003c5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <HAL_UART_IRQHandler+0x66>
 8003c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fc40 	bl	80044dc <UART_Receive_IT>
      return;
 8003c5c:	e25b      	b.n	8004116 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 80de 	beq.w	8003e24 <HAL_UART_IRQHandler+0x22c>
 8003c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80d1 	beq.w	8003e24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_UART_IRQHandler+0xae>
 8003c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f043 0201 	orr.w	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_UART_IRQHandler+0xd2>
 8003cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f043 0202 	orr.w	r2, r3, #2
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_UART_IRQHandler+0xf6>
 8003cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f043 0204 	orr.w	r2, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d011      	beq.n	8003d1e <HAL_UART_IRQHandler+0x126>
 8003cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d105      	bne.n	8003d12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f043 0208 	orr.w	r2, r3, #8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 81f2 	beq.w	800410c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_UART_IRQHandler+0x14e>
 8003d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fbcb 	bl	80044dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <HAL_UART_IRQHandler+0x17a>
 8003d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d04f      	beq.n	8003e12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fad3 	bl	800431e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	d141      	bne.n	8003e0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003db2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1d9      	bne.n	8003d86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d013      	beq.n	8003e02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	4a7e      	ldr	r2, [pc, #504]	; (8003fd8 <HAL_UART_IRQHandler+0x3e0>)
 8003de0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd ff44 	bl	8001c74 <HAL_DMA_Abort_IT>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	e00e      	b.n	8003e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f9a8 	bl	8004158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	e00a      	b.n	8003e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f9a4 	bl	8004158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	e006      	b.n	8003e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f9a0 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003e1e:	e175      	b.n	800410c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	bf00      	nop
    return;
 8003e22:	e173      	b.n	800410c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	f040 814f 	bne.w	80040cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8148 	beq.w	80040cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8141 	beq.w	80040cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	f040 80b6 	bne.w	8003fdc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8145 	beq.w	8004110 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	f080 813e 	bcs.w	8004110 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea6:	f000 8088 	beq.w	8003fba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ed6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1d9      	bne.n	8003eaa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3314      	adds	r3, #20
 8003efc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3314      	adds	r3, #20
 8003f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e1      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3314      	adds	r3, #20
 8003f52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e3      	bne.n	8003f32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f8a:	f023 0310 	bic.w	r3, r3, #16
 8003f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e3      	bne.n	8003f78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fd fded 	bl	8001b94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f8cb 	bl	800416c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fd6:	e09b      	b.n	8004110 <HAL_UART_IRQHandler+0x518>
 8003fd8:	080043e5 	.word	0x080043e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 808e 	beq.w	8004114 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8089 	beq.w	8004114 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	330c      	adds	r3, #12
 8004008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004026:	647a      	str	r2, [r7, #68]	; 0x44
 8004028:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800402c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e3      	bne.n	8004002 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3314      	adds	r3, #20
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	623b      	str	r3, [r7, #32]
   return(result);
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3314      	adds	r3, #20
 800405a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800405e:	633a      	str	r2, [r7, #48]	; 0x30
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e3      	bne.n	800403a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0310 	bic.w	r3, r3, #16
 8004096:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040a4:	61fa      	str	r2, [r7, #28]
 80040a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	69b9      	ldr	r1, [r7, #24]
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	617b      	str	r3, [r7, #20]
   return(result);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e3      	bne.n	8004080 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040c2:	4619      	mov	r1, r3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f851 	bl	800416c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040ca:	e023      	b.n	8004114 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d009      	beq.n	80040ec <HAL_UART_IRQHandler+0x4f4>
 80040d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f991 	bl	800440c <UART_Transmit_IT>
    return;
 80040ea:	e014      	b.n	8004116 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00e      	beq.n	8004116 <HAL_UART_IRQHandler+0x51e>
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f9d1 	bl	80044ac <UART_EndTransmit_IT>
    return;
 800410a:	e004      	b.n	8004116 <HAL_UART_IRQHandler+0x51e>
    return;
 800410c:	bf00      	nop
 800410e:	e002      	b.n	8004116 <HAL_UART_IRQHandler+0x51e>
      return;
 8004110:	bf00      	nop
 8004112:	e000      	b.n	8004116 <HAL_UART_IRQHandler+0x51e>
      return;
 8004114:	bf00      	nop
  }
}
 8004116:	37e8      	adds	r7, #232	; 0xe8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b090      	sub	sp, #64	; 0x40
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d137      	bne.n	8004210 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80041a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a2:	2200      	movs	r2, #0
 80041a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3314      	adds	r3, #20
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	623b      	str	r3, [r7, #32]
   return(result);
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80041be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3314      	adds	r3, #20
 80041c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041c6:	633a      	str	r2, [r7, #48]	; 0x30
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e5      	bne.n	80041a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
 80041f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	330c      	adds	r3, #12
 80041f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041fa:	61fa      	str	r2, [r7, #28]
 80041fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	69b9      	ldr	r1, [r7, #24]
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	617b      	str	r3, [r7, #20]
   return(result);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e5      	bne.n	80041da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800420e:	e002      	b.n	8004216 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004210:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004212:	f7ff ff83 	bl	800411c <HAL_UART_TxCpltCallback>
}
 8004216:	bf00      	nop
 8004218:	3740      	adds	r7, #64	; 0x40
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff ff7f 	bl	8004130 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004256:	2b80      	cmp	r3, #128	; 0x80
 8004258:	bf0c      	ite	eq
 800425a:	2301      	moveq	r3, #1
 800425c:	2300      	movne	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b21      	cmp	r3, #33	; 0x21
 800426c:	d108      	bne.n	8004280 <UART_DMAError+0x46>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800427a:	68b8      	ldr	r0, [r7, #8]
 800427c:	f000 f827 	bl	80042ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b22      	cmp	r3, #34	; 0x22
 80042a0:	d108      	bne.n	80042b4 <UART_DMAError+0x7a>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2200      	movs	r2, #0
 80042ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042ae:	68b8      	ldr	r0, [r7, #8]
 80042b0:	f000 f835 	bl	800431e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b8:	f043 0210 	orr.w	r2, r3, #16
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042c0:	68b8      	ldr	r0, [r7, #8]
 80042c2:	f7ff ff49 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b089      	sub	sp, #36	; 0x24
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	61ba      	str	r2, [r7, #24]
 80042f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6979      	ldr	r1, [r7, #20]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	613b      	str	r3, [r7, #16]
   return(result);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e5      	bne.n	80042d6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004312:	bf00      	nop
 8004314:	3724      	adds	r7, #36	; 0x24
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800431e:	b480      	push	{r7}
 8004320:	b095      	sub	sp, #84	; 0x54
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800433c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004346:	643a      	str	r2, [r7, #64]	; 0x40
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800434c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	61fb      	str	r3, [r7, #28]
   return(result);
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	64bb      	str	r3, [r7, #72]	; 0x48
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800437a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	2b01      	cmp	r3, #1
 8004394:	d119      	bne.n	80043ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f023 0310 	bic.w	r3, r3, #16
 80043ac:	647b      	str	r3, [r7, #68]	; 0x44
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043b6:	61ba      	str	r2, [r7, #24]
 80043b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6979      	ldr	r1, [r7, #20]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	613b      	str	r3, [r7, #16]
   return(result);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e5      	bne.n	8004396 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043d8:	bf00      	nop
 80043da:	3754      	adds	r7, #84	; 0x54
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7ff feaa 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b21      	cmp	r3, #33	; 0x21
 800441e:	d13e      	bne.n	800449e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004428:	d114      	bne.n	8004454 <UART_Transmit_IT+0x48>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d110      	bne.n	8004454 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004446:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	1c9a      	adds	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]
 8004452:	e008      	b.n	8004466 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	1c59      	adds	r1, r3, #1
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6211      	str	r1, [r2, #32]
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29b      	uxth	r3, r3
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	4619      	mov	r1, r3
 8004474:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10f      	bne.n	800449a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004488:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004498:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff fe25 	bl	800411c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	; 0x30
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b22      	cmp	r3, #34	; 0x22
 80044ee:	f040 80ae 	bne.w	800464e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fa:	d117      	bne.n	800452c <UART_Receive_IT+0x50>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d113      	bne.n	800452c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451a:	b29a      	uxth	r2, r3
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004524:	1c9a      	adds	r2, r3, #2
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	629a      	str	r2, [r3, #40]	; 0x28
 800452a:	e026      	b.n	800457a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453e:	d007      	beq.n	8004550 <UART_Receive_IT+0x74>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <UART_Receive_IT+0x82>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d106      	bne.n	800455e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	e008      	b.n	8004570 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456a:	b2da      	uxtb	r2, r3
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29b      	uxth	r3, r3
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	4619      	mov	r1, r3
 8004588:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800458a:	2b00      	cmp	r3, #0
 800458c:	d15d      	bne.n	800464a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0220 	bic.w	r2, r2, #32
 800459c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d135      	bne.n	8004640 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f023 0310 	bic.w	r3, r3, #16
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	623a      	str	r2, [r7, #32]
 80045fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	69f9      	ldr	r1, [r7, #28]
 8004600:	6a3a      	ldr	r2, [r7, #32]
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	61bb      	str	r3, [r7, #24]
   return(result);
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e5      	bne.n	80045da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b10      	cmp	r3, #16
 800461a:	d10a      	bne.n	8004632 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004636:	4619      	mov	r1, r3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff fd97 	bl	800416c <HAL_UARTEx_RxEventCallback>
 800463e:	e002      	b.n	8004646 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff fd7f 	bl	8004144 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	e002      	b.n	8004650 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3730      	adds	r7, #48	; 0x30
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800465c:	b0c0      	sub	sp, #256	; 0x100
 800465e:	af00      	add	r7, sp, #0
 8004660:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	68d9      	ldr	r1, [r3, #12]
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	ea40 0301 	orr.w	r3, r0, r1
 8004680:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	431a      	orrs	r2, r3
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	431a      	orrs	r2, r3
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046b0:	f021 010c 	bic.w	r1, r1, #12
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046be:	430b      	orrs	r3, r1
 80046c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d2:	6999      	ldr	r1, [r3, #24]
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	ea40 0301 	orr.w	r3, r0, r1
 80046de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b8f      	ldr	r3, [pc, #572]	; (8004924 <UART_SetConfig+0x2cc>)
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d005      	beq.n	80046f8 <UART_SetConfig+0xa0>
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b8d      	ldr	r3, [pc, #564]	; (8004928 <UART_SetConfig+0x2d0>)
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d104      	bne.n	8004702 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046f8:	f7fe fb82 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 80046fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004700:	e003      	b.n	800470a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004702:	f7fe fb69 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8004706:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004714:	f040 810c 	bne.w	8004930 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800471c:	2200      	movs	r2, #0
 800471e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004722:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004726:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	1891      	adds	r1, r2, r2
 8004730:	65b9      	str	r1, [r7, #88]	; 0x58
 8004732:	415b      	adcs	r3, r3
 8004734:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004736:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800473a:	4621      	mov	r1, r4
 800473c:	eb12 0801 	adds.w	r8, r2, r1
 8004740:	4629      	mov	r1, r5
 8004742:	eb43 0901 	adc.w	r9, r3, r1
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800475a:	4690      	mov	r8, r2
 800475c:	4699      	mov	r9, r3
 800475e:	4623      	mov	r3, r4
 8004760:	eb18 0303 	adds.w	r3, r8, r3
 8004764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004768:	462b      	mov	r3, r5
 800476a:	eb49 0303 	adc.w	r3, r9, r3
 800476e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800477e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004782:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004786:	460b      	mov	r3, r1
 8004788:	18db      	adds	r3, r3, r3
 800478a:	653b      	str	r3, [r7, #80]	; 0x50
 800478c:	4613      	mov	r3, r2
 800478e:	eb42 0303 	adc.w	r3, r2, r3
 8004792:	657b      	str	r3, [r7, #84]	; 0x54
 8004794:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004798:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800479c:	f7fb fd1c 	bl	80001d8 <__aeabi_uldivmod>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4b61      	ldr	r3, [pc, #388]	; (800492c <UART_SetConfig+0x2d4>)
 80047a6:	fba3 2302 	umull	r2, r3, r3, r2
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	011c      	lsls	r4, r3, #4
 80047ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047c0:	4642      	mov	r2, r8
 80047c2:	464b      	mov	r3, r9
 80047c4:	1891      	adds	r1, r2, r2
 80047c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80047c8:	415b      	adcs	r3, r3
 80047ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047d0:	4641      	mov	r1, r8
 80047d2:	eb12 0a01 	adds.w	sl, r2, r1
 80047d6:	4649      	mov	r1, r9
 80047d8:	eb43 0b01 	adc.w	fp, r3, r1
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047f0:	4692      	mov	sl, r2
 80047f2:	469b      	mov	fp, r3
 80047f4:	4643      	mov	r3, r8
 80047f6:	eb1a 0303 	adds.w	r3, sl, r3
 80047fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047fe:	464b      	mov	r3, r9
 8004800:	eb4b 0303 	adc.w	r3, fp, r3
 8004804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004814:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004818:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800481c:	460b      	mov	r3, r1
 800481e:	18db      	adds	r3, r3, r3
 8004820:	643b      	str	r3, [r7, #64]	; 0x40
 8004822:	4613      	mov	r3, r2
 8004824:	eb42 0303 	adc.w	r3, r2, r3
 8004828:	647b      	str	r3, [r7, #68]	; 0x44
 800482a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800482e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004832:	f7fb fcd1 	bl	80001d8 <__aeabi_uldivmod>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4611      	mov	r1, r2
 800483c:	4b3b      	ldr	r3, [pc, #236]	; (800492c <UART_SetConfig+0x2d4>)
 800483e:	fba3 2301 	umull	r2, r3, r3, r1
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	2264      	movs	r2, #100	; 0x64
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	1acb      	subs	r3, r1, r3
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004852:	4b36      	ldr	r3, [pc, #216]	; (800492c <UART_SetConfig+0x2d4>)
 8004854:	fba3 2302 	umull	r2, r3, r3, r2
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004860:	441c      	add	r4, r3
 8004862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004866:	2200      	movs	r2, #0
 8004868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800486c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004870:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004874:	4642      	mov	r2, r8
 8004876:	464b      	mov	r3, r9
 8004878:	1891      	adds	r1, r2, r2
 800487a:	63b9      	str	r1, [r7, #56]	; 0x38
 800487c:	415b      	adcs	r3, r3
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004880:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004884:	4641      	mov	r1, r8
 8004886:	1851      	adds	r1, r2, r1
 8004888:	6339      	str	r1, [r7, #48]	; 0x30
 800488a:	4649      	mov	r1, r9
 800488c:	414b      	adcs	r3, r1
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800489c:	4659      	mov	r1, fp
 800489e:	00cb      	lsls	r3, r1, #3
 80048a0:	4651      	mov	r1, sl
 80048a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a6:	4651      	mov	r1, sl
 80048a8:	00ca      	lsls	r2, r1, #3
 80048aa:	4610      	mov	r0, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	4642      	mov	r2, r8
 80048b2:	189b      	adds	r3, r3, r2
 80048b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048b8:	464b      	mov	r3, r9
 80048ba:	460a      	mov	r2, r1
 80048bc:	eb42 0303 	adc.w	r3, r2, r3
 80048c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048d8:	460b      	mov	r3, r1
 80048da:	18db      	adds	r3, r3, r3
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048de:	4613      	mov	r3, r2
 80048e0:	eb42 0303 	adc.w	r3, r2, r3
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048ee:	f7fb fc73 	bl	80001d8 <__aeabi_uldivmod>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <UART_SetConfig+0x2d4>)
 80048f8:	fba3 1302 	umull	r1, r3, r3, r2
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	2164      	movs	r1, #100	; 0x64
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	3332      	adds	r3, #50	; 0x32
 800490a:	4a08      	ldr	r2, [pc, #32]	; (800492c <UART_SetConfig+0x2d4>)
 800490c:	fba2 2303 	umull	r2, r3, r2, r3
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	f003 0207 	and.w	r2, r3, #7
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4422      	add	r2, r4
 800491e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004920:	e106      	b.n	8004b30 <UART_SetConfig+0x4d8>
 8004922:	bf00      	nop
 8004924:	40011000 	.word	0x40011000
 8004928:	40011400 	.word	0x40011400
 800492c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004934:	2200      	movs	r2, #0
 8004936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800493a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800493e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004942:	4642      	mov	r2, r8
 8004944:	464b      	mov	r3, r9
 8004946:	1891      	adds	r1, r2, r2
 8004948:	6239      	str	r1, [r7, #32]
 800494a:	415b      	adcs	r3, r3
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
 800494e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004952:	4641      	mov	r1, r8
 8004954:	1854      	adds	r4, r2, r1
 8004956:	4649      	mov	r1, r9
 8004958:	eb43 0501 	adc.w	r5, r3, r1
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	00eb      	lsls	r3, r5, #3
 8004966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800496a:	00e2      	lsls	r2, r4, #3
 800496c:	4614      	mov	r4, r2
 800496e:	461d      	mov	r5, r3
 8004970:	4643      	mov	r3, r8
 8004972:	18e3      	adds	r3, r4, r3
 8004974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004978:	464b      	mov	r3, r9
 800497a:	eb45 0303 	adc.w	r3, r5, r3
 800497e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800498e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800499e:	4629      	mov	r1, r5
 80049a0:	008b      	lsls	r3, r1, #2
 80049a2:	4621      	mov	r1, r4
 80049a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a8:	4621      	mov	r1, r4
 80049aa:	008a      	lsls	r2, r1, #2
 80049ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049b0:	f7fb fc12 	bl	80001d8 <__aeabi_uldivmod>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4b60      	ldr	r3, [pc, #384]	; (8004b3c <UART_SetConfig+0x4e4>)
 80049ba:	fba3 2302 	umull	r2, r3, r3, r2
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	011c      	lsls	r4, r3, #4
 80049c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	1891      	adds	r1, r2, r2
 80049da:	61b9      	str	r1, [r7, #24]
 80049dc:	415b      	adcs	r3, r3
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049e4:	4641      	mov	r1, r8
 80049e6:	1851      	adds	r1, r2, r1
 80049e8:	6139      	str	r1, [r7, #16]
 80049ea:	4649      	mov	r1, r9
 80049ec:	414b      	adcs	r3, r1
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049fc:	4659      	mov	r1, fp
 80049fe:	00cb      	lsls	r3, r1, #3
 8004a00:	4651      	mov	r1, sl
 8004a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a06:	4651      	mov	r1, sl
 8004a08:	00ca      	lsls	r2, r1, #3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4642      	mov	r2, r8
 8004a12:	189b      	adds	r3, r3, r2
 8004a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a18:	464b      	mov	r3, r9
 8004a1a:	460a      	mov	r2, r1
 8004a1c:	eb42 0303 	adc.w	r3, r2, r3
 8004a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	008b      	lsls	r3, r1, #2
 8004a40:	4641      	mov	r1, r8
 8004a42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a46:	4641      	mov	r1, r8
 8004a48:	008a      	lsls	r2, r1, #2
 8004a4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a4e:	f7fb fbc3 	bl	80001d8 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <UART_SetConfig+0x4e4>)
 8004a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2264      	movs	r2, #100	; 0x64
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	1acb      	subs	r3, r1, r3
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	3332      	adds	r3, #50	; 0x32
 8004a6c:	4a33      	ldr	r2, [pc, #204]	; (8004b3c <UART_SetConfig+0x4e4>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a78:	441c      	add	r4, r3
 8004a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7e:	2200      	movs	r2, #0
 8004a80:	673b      	str	r3, [r7, #112]	; 0x70
 8004a82:	677a      	str	r2, [r7, #116]	; 0x74
 8004a84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a88:	4642      	mov	r2, r8
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	1891      	adds	r1, r2, r2
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	415b      	adcs	r3, r3
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a98:	4641      	mov	r1, r8
 8004a9a:	1851      	adds	r1, r2, r1
 8004a9c:	6039      	str	r1, [r7, #0]
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	414b      	adcs	r3, r1
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	00cb      	lsls	r3, r1, #3
 8004ab4:	4651      	mov	r1, sl
 8004ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aba:	4651      	mov	r1, sl
 8004abc:	00ca      	lsls	r2, r1, #3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	189b      	adds	r3, r3, r2
 8004ac8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aca:	464b      	mov	r3, r9
 8004acc:	460a      	mov	r2, r1
 8004ace:	eb42 0303 	adc.w	r3, r2, r3
 8004ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	663b      	str	r3, [r7, #96]	; 0x60
 8004ade:	667a      	str	r2, [r7, #100]	; 0x64
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004aec:	4649      	mov	r1, r9
 8004aee:	008b      	lsls	r3, r1, #2
 8004af0:	4641      	mov	r1, r8
 8004af2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004af6:	4641      	mov	r1, r8
 8004af8:	008a      	lsls	r2, r1, #2
 8004afa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004afe:	f7fb fb6b 	bl	80001d8 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <UART_SetConfig+0x4e4>)
 8004b08:	fba3 1302 	umull	r1, r3, r3, r2
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	2164      	movs	r1, #100	; 0x64
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	3332      	adds	r3, #50	; 0x32
 8004b1a:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <UART_SetConfig+0x4e4>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	f003 020f 	and.w	r2, r3, #15
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4422      	add	r2, r4
 8004b2e:	609a      	str	r2, [r3, #8]
}
 8004b30:	bf00      	nop
 8004b32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b36:	46bd      	mov	sp, r7
 8004b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3c:	51eb851f 	.word	0x51eb851f

08004b40 <memset>:
 8004b40:	4402      	add	r2, r0
 8004b42:	4603      	mov	r3, r0
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d100      	bne.n	8004b4a <memset+0xa>
 8004b48:	4770      	bx	lr
 8004b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b4e:	e7f9      	b.n	8004b44 <memset+0x4>

08004b50 <__libc_init_array>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4d0d      	ldr	r5, [pc, #52]	; (8004b88 <__libc_init_array+0x38>)
 8004b54:	4c0d      	ldr	r4, [pc, #52]	; (8004b8c <__libc_init_array+0x3c>)
 8004b56:	1b64      	subs	r4, r4, r5
 8004b58:	10a4      	asrs	r4, r4, #2
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	42a6      	cmp	r6, r4
 8004b5e:	d109      	bne.n	8004b74 <__libc_init_array+0x24>
 8004b60:	4d0b      	ldr	r5, [pc, #44]	; (8004b90 <__libc_init_array+0x40>)
 8004b62:	4c0c      	ldr	r4, [pc, #48]	; (8004b94 <__libc_init_array+0x44>)
 8004b64:	f000 f818 	bl	8004b98 <_init>
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	42a6      	cmp	r6, r4
 8004b70:	d105      	bne.n	8004b7e <__libc_init_array+0x2e>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b78:	4798      	blx	r3
 8004b7a:	3601      	adds	r6, #1
 8004b7c:	e7ee      	b.n	8004b5c <__libc_init_array+0xc>
 8004b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b82:	4798      	blx	r3
 8004b84:	3601      	adds	r6, #1
 8004b86:	e7f2      	b.n	8004b6e <__libc_init_array+0x1e>
 8004b88:	08004bd8 	.word	0x08004bd8
 8004b8c:	08004bd8 	.word	0x08004bd8
 8004b90:	08004bd8 	.word	0x08004bd8
 8004b94:	08004bdc 	.word	0x08004bdc

08004b98 <_init>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	bf00      	nop
 8004b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9e:	bc08      	pop	{r3}
 8004ba0:	469e      	mov	lr, r3
 8004ba2:	4770      	bx	lr

08004ba4 <_fini>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr
