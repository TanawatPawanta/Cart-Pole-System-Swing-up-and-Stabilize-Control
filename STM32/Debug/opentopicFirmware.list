
opentopicFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004620  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d8  080047d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e0  080047e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047e4  080047e4  000147e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  080047f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080047f4  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f884  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f1  00000000  00000000  0002f903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00031ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac6  00000000  00000000  00032dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001783b  00000000  00000000  0003389e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011efa  00000000  00000000  0004b0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009659f  00000000  00000000  0005cfd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038ec  00000000  00000000  000f3574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000f6e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080047a0 	.word	0x080047a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080047a0 	.word	0x080047a0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Encoder_init>:
 *      Author: tanawatp
 */
#include "main.h"
#include "Encoder.h"
void Encoder_init(Encoder* encoder, TIM_HandleTypeDef* htim_ch, uint8_t freq)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	4613      	mov	r3, r2
 80004e0:	71fb      	strb	r3, [r7, #7]
	encoder->QEI_read = 0;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2200      	movs	r2, #0
 80004e6:	801a      	strh	r2, [r3, #0]
//	encoder->deg = 0;
//	encoder->deg_m1 = 0;
//	encoder->ddeg = 0;
	encoder->freq = freq;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	79fa      	ldrb	r2, [r7, #7]
 80004ec:	709a      	strb	r2, [r3, #2]
	encoder->htim_ch = htim_ch;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	605a      	str	r2, [r3, #4]
}
 80004f4:	bf00      	nop
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <Encoder_getFeedback>:
void Encoder_getFeedback(Encoder* encoder)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	encoder->QEI_read = __HAL_TIM_GET_COUNTER(encoder->htim_ch);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000510:	b21a      	sxth	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	801a      	strh	r2, [r3, #0]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000536:	4b21      	ldr	r3, [pc, #132]	; (80005bc <MX_ADC1_Init+0x98>)
 8000538:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <MX_ADC1_Init+0x9c>)
 800053a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <MX_ADC1_Init+0x98>)
 800053e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000542:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <MX_ADC1_Init+0x98>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800054a:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <MX_ADC1_Init+0x98>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <MX_ADC1_Init+0x98>)
 8000552:	2200      	movs	r2, #0
 8000554:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <MX_ADC1_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_ADC1_Init+0x98>)
 8000560:	2200      	movs	r2, #0
 8000562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_ADC1_Init+0x98>)
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <MX_ADC1_Init+0xa0>)
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_ADC1_Init+0x98>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_ADC1_Init+0x98>)
 8000572:	2201      	movs	r2, #1
 8000574:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_ADC1_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_ADC1_Init+0x98>)
 8000580:	2201      	movs	r2, #1
 8000582:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000584:	480d      	ldr	r0, [pc, #52]	; (80005bc <MX_ADC1_Init+0x98>)
 8000586:	f000 fdcd 	bl	8001124 <HAL_ADC_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000590:	f000 fa26 	bl	80009e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000594:	2304      	movs	r3, #4
 8000596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a0:	463b      	mov	r3, r7
 80005a2:	4619      	mov	r1, r3
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_ADC1_Init+0x98>)
 80005a6:	f000 fe01 	bl	80011ac <HAL_ADC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005b0:	f000 fa16 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000028 	.word	0x20000028
 80005c0:	40012000 	.word	0x40012000
 80005c4:	0f000001 	.word	0x0f000001

080005c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a17      	ldr	r2, [pc, #92]	; (8000644 <HAL_ADC_MspInit+0x7c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d127      	bne.n	800063a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <HAL_ADC_MspInit+0x80>)
 80005f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f2:	4a15      	ldr	r2, [pc, #84]	; (8000648 <HAL_ADC_MspInit+0x80>)
 80005f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f8:	6453      	str	r3, [r2, #68]	; 0x44
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <HAL_ADC_MspInit+0x80>)
 80005fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_ADC_MspInit+0x80>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <HAL_ADC_MspInit+0x80>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_ADC_MspInit+0x80>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000622:	2310      	movs	r3, #16
 8000624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000626:	2303      	movs	r3, #3
 8000628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <HAL_ADC_MspInit+0x84>)
 8000636:	f001 fcfb 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	; 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40012000 	.word	0x40012000
 8000648:	40023800 	.word	0x40023800
 800064c:	40020000 	.word	0x40020000

08000650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_DMA_Init+0x3c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a0b      	ldr	r2, [pc, #44]	; (800068c <MX_DMA_Init+0x3c>)
 8000660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_DMA_Init+0x3c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2011      	movs	r0, #17
 8000678:	f001 f8a1 	bl	80017be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800067c:	2011      	movs	r0, #17
 800067e:	f001 f8ba 	bl	80017f6 <HAL_NVIC_EnableIRQ>

}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a3d      	ldr	r2, [pc, #244]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a36      	ldr	r2, [pc, #216]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a2f      	ldr	r2, [pc, #188]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <MX_GPIO_Init+0x114>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <MX_GPIO_Init+0x114>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_GPIO_Init+0x114>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	4823      	ldr	r0, [pc, #140]	; (80007a8 <MX_GPIO_Init+0x118>)
 800071c:	f001 fe0c 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2104      	movs	r1, #4
 8000724:	4821      	ldr	r0, [pc, #132]	; (80007ac <MX_GPIO_Init+0x11c>)
 8000726:	f001 fe07 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000730:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	481b      	ldr	r0, [pc, #108]	; (80007b0 <MX_GPIO_Init+0x120>)
 8000742:	f001 fc75 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000746:	2320      	movs	r3, #32
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0x118>)
 800075e:	f001 fc67 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000762:	2304      	movs	r3, #4
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0x11c>)
 800077a:	f001 fc59 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800077e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000784:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0x118>)
 8000796:	f001 fc4b 	bl	8002030 <HAL_GPIO_Init>

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020400 	.word	0x40020400
 80007b0:	40020800 	.word	0x40020800

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 fc42 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f872 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f7ff ff66 	bl	8000690 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c4:	f7ff ff44 	bl	8000650 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007c8:	f000 fb64 	bl	8000e94 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007cc:	f000 f986 	bl	8000adc <MX_TIM1_Init>
  MX_TIM2_Init();
 80007d0:	f000 f9dc 	bl	8000b8c <MX_TIM2_Init>
  MX_TIM3_Init();
 80007d4:	f000 fa2e 	bl	8000c34 <MX_TIM3_Init>
  MX_ADC1_Init();
 80007d8:	f7ff fea4 	bl	8000524 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80007dc:	2104      	movs	r1, #4
 80007de:	482a      	ldr	r0, [pc, #168]	; (8000888 <main+0xd4>)
 80007e0:	f002 fb51 	bl	8002e86 <HAL_TIM_Encoder_Start>
  Encoder_init(&Pole_encoder, &htim1, 100);
 80007e4:	2264      	movs	r2, #100	; 0x64
 80007e6:	4928      	ldr	r1, [pc, #160]	; (8000888 <main+0xd4>)
 80007e8:	4828      	ldr	r0, [pc, #160]	; (800088c <main+0xd8>)
 80007ea:	f7ff fe73 	bl	80004d4 <Encoder_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t timestamp = 0;
	  Pole_QEI_read = __HAL_TIM_GET_COUNTER(&htim1);
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <main+0xd4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <main+0xdc>)
 80007f8:	801a      	strh	r2, [r3, #0]
	  Encoder_getFeedback(&Pole_encoder);
 80007fa:	4824      	ldr	r0, [pc, #144]	; (800088c <main+0xd8>)
 80007fc:	f7ff fe80 	bl	8000500 <Encoder_getFeedback>
	  if(HAL_GetTick()>=timestamp)
 8000800:	f000 fc84 	bl	800110c <HAL_GetTick>
 8000804:	4602      	mov	r2, r0
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <main+0xe0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	d3ef      	bcc.n	80007ee <main+0x3a>
	  {
			timestamp = HAL_GetTick() + 10; // 100 hz
 800080e:	f000 fc7d 	bl	800110c <HAL_GetTick>
 8000812:	4603      	mov	r3, r0
 8000814:	330a      	adds	r3, #10
 8000816:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <main+0xe0>)
 8000818:	6013      	str	r3, [r2, #0]
			if(Pole_QEI_read<=2000)
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <main+0xdc>)
 800081c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000820:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000824:	dc0b      	bgt.n	800083e <main+0x8a>
			{
//				deg = (Pole_QEI_read*0.09)*100;
				deg = Pole_QEI_read*9;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <main+0xdc>)
 8000828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082c:	b29b      	uxth	r3, r3
 800082e:	461a      	mov	r2, r3
 8000830:	00d2      	lsls	r2, r2, #3
 8000832:	4413      	add	r3, r2
 8000834:	b29b      	uxth	r3, r3
 8000836:	b21a      	sxth	r2, r3
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <main+0xe4>)
 800083a:	801a      	strh	r2, [r3, #0]
 800083c:	e00c      	b.n	8000858 <main+0xa4>
			}
			else
			{
//				deg = ((Pole_QEI_read-4000)*0.09)*100;
				deg = (Pole_QEI_read-4000)*9;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <main+0xdc>)
 8000840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000844:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000848:	b29b      	uxth	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	00d2      	lsls	r2, r2, #3
 800084e:	4413      	add	r3, r2
 8000850:	b29b      	uxth	r3, r3
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <main+0xe4>)
 8000856:	801a      	strh	r2, [r3, #0]
			}
			ddeg = (deg - deg_m1);
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <main+0xe4>)
 800085a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <main+0xe8>)
 8000862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000866:	b29b      	uxth	r3, r3
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	b29b      	uxth	r3, r3
 800086c:	b21a      	sxth	r2, r3
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <main+0xec>)
 8000870:	801a      	strh	r2, [r3, #0]
			deg_m1 = deg;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <main+0xe4>)
 8000874:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <main+0xe8>)
 800087a:	801a      	strh	r2, [r3, #0]
			ToSimulink(61, &Pole_encoder.QEI_read, &ddeg);
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <main+0xec>)
 800087e:	4903      	ldr	r1, [pc, #12]	; (800088c <main+0xd8>)
 8000880:	203d      	movs	r0, #61	; 0x3d
 8000882:	f000 f879 	bl	8000978 <ToSimulink>
  {
 8000886:	e7b2      	b.n	80007ee <main+0x3a>
 8000888:	2000008c 	.word	0x2000008c
 800088c:	20000070 	.word	0x20000070
 8000890:	20000078 	.word	0x20000078
 8000894:	20000088 	.word	0x20000088
 8000898:	2000007a 	.word	0x2000007a
 800089c:	2000007c 	.word	0x2000007c
 80008a0:	2000007e 	.word	0x2000007e

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	; 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	2230      	movs	r2, #48	; 0x30
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 ff48 	bl	8004748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a27      	ldr	r2, [pc, #156]	; (8000970 <SystemClock_Config+0xcc>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <SystemClock_Config+0xcc>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a21      	ldr	r2, [pc, #132]	; (8000974 <SystemClock_Config+0xd0>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <SystemClock_Config+0xd0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2310      	movs	r3, #16
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	2302      	movs	r3, #2
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000910:	2300      	movs	r3, #0
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000914:	2310      	movs	r3, #16
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000918:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800091c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800091e:	2304      	movs	r3, #4
 8000920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000922:	2304      	movs	r3, #4
 8000924:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fd1e 	bl	800236c <HAL_RCC_OscConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000936:	f000 f853 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	230f      	movs	r3, #15
 800093c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2302      	movs	r3, #2
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2102      	movs	r1, #2
 8000956:	4618      	mov	r0, r3
 8000958:	f001 ff80 	bl	800285c <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000962:	f000 f83d 	bl	80009e0 <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3750      	adds	r7, #80	; 0x50
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40007000 	.word	0x40007000

08000978 <ToSimulink>:

/* USER CODE BEGIN 4 */
void ToSimulink(uint8_t header, int16_t* data1, int16_t* data2)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	73fb      	strb	r3, [r7, #15]
	TxBuffer[0] = header; // header
 8000986:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <ToSimulink+0x60>)
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	7013      	strb	r3, [r2, #0]
	TxBuffer[1] = *data1 & 0xff;
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <ToSimulink+0x60>)
 8000996:	705a      	strb	r2, [r3, #1]
	TxBuffer[2] = (*data1 & 0xff00) >> 8;
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800099e:	121b      	asrs	r3, r3, #8
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <ToSimulink+0x60>)
 80009a4:	709a      	strb	r2, [r3, #2]

	TxBuffer[3] = *data2 & 0xff;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <ToSimulink+0x60>)
 80009b0:	70da      	strb	r2, [r3, #3]
	TxBuffer[4] = (*data2 & 0xff00) >> 8;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b8:	121b      	asrs	r3, r3, #8
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <ToSimulink+0x60>)
 80009be:	711a      	strb	r2, [r3, #4]
	TxBuffer[5] = 10; // /n
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <ToSimulink+0x60>)
 80009c2:	220a      	movs	r2, #10
 80009c4:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_DMA(&huart2,TxBuffer, 6);
 80009c6:	2206      	movs	r2, #6
 80009c8:	4903      	ldr	r1, [pc, #12]	; (80009d8 <ToSimulink+0x60>)
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <ToSimulink+0x64>)
 80009cc:	f002 fea8 	bl	8003720 <HAL_UART_Transmit_DMA>
}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000080 	.word	0x20000080
 80009dc:	20000164 	.word	0x20000164

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a2a:	2007      	movs	r0, #7
 8000a2c:	f000 febc 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 fb2c 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <DMA1_Stream6_IRQHandler+0x10>)
 8000a96:	f001 f861 	bl	8001b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200001ac 	.word	0x200001ac

08000aa4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <USART2_IRQHandler+0x10>)
 8000aaa:	f002 fea9 	bl	8003800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000164 	.word	0x20000164

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2224      	movs	r2, #36	; 0x24
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fe2c 	bl	8004748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_TIM1_Init+0xa8>)
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <MX_TIM1_Init+0xac>)
 8000afc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_TIM1_Init+0xa8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_TIM1_Init+0xa8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_TIM1_Init+0xa8>)
 8000b0c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000b10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_TIM1_Init+0xa8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_TIM1_Init+0xa8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_TIM1_Init+0xa8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b24:	2303      	movs	r3, #3
 8000b26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_TIM1_Init+0xa8>)
 8000b50:	f002 f8f3 	bl	8002d3a <HAL_TIM_Encoder_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b5a:	f7ff ff41 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <MX_TIM1_Init+0xa8>)
 8000b6c:	f002 fd1a 	bl	80035a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000b76:	f7ff ff33 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3730      	adds	r7, #48	; 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000008c 	.word	0x2000008c
 8000b88:	40010000 	.word	0x40010000

08000b8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	2224      	movs	r2, #36	; 0x24
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 fdd4 	bl	8004748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_TIM2_Init+0xa4>)
 8000baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_TIM2_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_TIM2_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_TIM2_Init+0xa4>)
 8000bbe:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000bc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM2_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_TIM2_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be8:	2301      	movs	r3, #1
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_TIM2_Init+0xa4>)
 8000bfc:	f002 f89d 	bl	8002d3a <HAL_TIM_Encoder_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000c06:	f7ff feeb 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_TIM2_Init+0xa4>)
 8000c18:	f002 fcc4 	bl	80035a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c22:	f7ff fedd 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000d4 	.word	0x200000d4

08000c34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
 8000c52:	615a      	str	r2, [r3, #20]
 8000c54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c56:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <MX_TIM3_Init+0xac>)
 8000c58:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <MX_TIM3_Init+0xb0>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c5c:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <MX_TIM3_Init+0xac>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_TIM3_Init+0xac>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_TIM3_Init+0xac>)
 8000c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <MX_TIM3_Init+0xac>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_TIM3_Init+0xac>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c7c:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <MX_TIM3_Init+0xac>)
 8000c7e:	f002 f80d 	bl	8002c9c <HAL_TIM_PWM_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c88:	f7ff feaa 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c94:	f107 0320 	add.w	r3, r7, #32
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <MX_TIM3_Init+0xac>)
 8000c9c:	f002 fc82 	bl	80035a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ca6:	f7ff fe9b 	bl	80009e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000caa:	2360      	movs	r3, #96	; 0x60
 8000cac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	220c      	movs	r2, #12
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <MX_TIM3_Init+0xac>)
 8000cc2:	f002 f96f 	bl	8002fa4 <HAL_TIM_PWM_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ccc:	f7ff fe88 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <MX_TIM3_Init+0xac>)
 8000cd2:	f000 f8a5 	bl	8000e20 <HAL_TIM_MspPostInit>

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000011c 	.word	0x2000011c
 8000ce4:	40000400 	.word	0x40000400

08000ce8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a32      	ldr	r2, [pc, #200]	; (8000dd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12d      	bne.n	8000d66 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a30      	ldr	r2, [pc, #192]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	61bb      	str	r3, [r7, #24]
 8000d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a29      	ldr	r2, [pc, #164]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481e      	ldr	r0, [pc, #120]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000d60:	f001 f966 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d64:	e030      	b.n	8000dc8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM2)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d6e:	d12b      	bne.n	8000dc8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000da8:	2303      	movs	r3, #3
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000dc4:	f001 f934 	bl	8002030 <HAL_GPIO_Init>
}
 8000dc8:	bf00      	nop
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10d      	bne.n	8000e0a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_TIM_PWM_MspInit+0x40>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_TIM_PWM_MspInit+0x40>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_TIM_PWM_MspInit+0x40>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40000400 	.word	0x40000400
 8000e1c:	40023800 	.word	0x40023800

08000e20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <HAL_TIM_MspPostInit+0x68>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d11d      	bne.n	8000e7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_TIM_MspPostInit+0x6c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_TIM_MspPostInit+0x6c>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_TIM_MspPostInit+0x6c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_TIM_MspPostInit+0x70>)
 8000e7a:	f001 f8d9 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40000400 	.word	0x40000400
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020400 	.word	0x40020400

08000e94 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <MX_USART2_UART_Init+0x50>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ecc:	f002 fbd8 	bl	8003680 <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ed6:	f7ff fd83 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000164 	.word	0x20000164
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a34      	ldr	r2, [pc, #208]	; (8000fd8 <HAL_UART_MspInit+0xf0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d161      	bne.n	8000fce <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <HAL_UART_MspInit+0xf4>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a32      	ldr	r2, [pc, #200]	; (8000fdc <HAL_UART_MspInit+0xf4>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <HAL_UART_MspInit+0xf4>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <HAL_UART_MspInit+0xf4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a2b      	ldr	r2, [pc, #172]	; (8000fdc <HAL_UART_MspInit+0xf4>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <HAL_UART_MspInit+0xf4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f42:	230c      	movs	r3, #12
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f52:	2307      	movs	r3, #7
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4820      	ldr	r0, [pc, #128]	; (8000fe0 <HAL_UART_MspInit+0xf8>)
 8000f5e:	f001 f867 	bl	8002030 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000f64:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <HAL_UART_MspInit+0x100>)
 8000f66:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000f6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000f72:	2240      	movs	r2, #64	; 0x40
 8000f74:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f82:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000fa2:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000fa4:	f000 fc42 	bl	800182c <HAL_DMA_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000fae:	f7ff fd17 	bl	80009e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_UART_MspInit+0xfc>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2026      	movs	r0, #38	; 0x26
 8000fc4:	f000 fbfb 	bl	80017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fc8:	2026      	movs	r0, #38	; 0x26
 8000fca:	f000 fc14 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	200001ac 	.word	0x200001ac
 8000fe8:	400260a0 	.word	0x400260a0

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff0:	f7ff fd62 	bl	8000ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101a:	f003 fb9d 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fbc9 	bl	80007b4 <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001030:	080047e8 	.word	0x080047e8
  ldr r2, =_sbss
 8001034:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001038:	20000210 	.word	0x20000210

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 fb9d 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fcba 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fbb5 	bl	8001812 <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 fb7d 	bl	80017be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	2000020c 	.word	0x2000020c

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2000020c 	.word	0x2000020c

08001124 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e033      	b.n	80011a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	2b00      	cmp	r3, #0
 8001140:	d109      	bne.n	8001156 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fa40 	bl	80005c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	2b00      	cmp	r3, #0
 8001160:	d118      	bne.n	8001194 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800116a:	f023 0302 	bic.w	r3, r3, #2
 800116e:	f043 0202 	orr.w	r2, r3, #2
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f94a 	bl	8001410 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f023 0303 	bic.w	r3, r3, #3
 800118a:	f043 0201 	orr.w	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
 8001192:	e001      	b.n	8001198 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1c>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e113      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x244>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	d925      	bls.n	8001224 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	3b1e      	subs	r3, #30
 80011ee:	2207      	movs	r2, #7
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43da      	mvns	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	400a      	ands	r2, r1
 80011fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68d9      	ldr	r1, [r3, #12]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	4603      	mov	r3, r0
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4403      	add	r3, r0
 8001216:	3b1e      	subs	r3, #30
 8001218:	409a      	lsls	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	e022      	b.n	800126a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6919      	ldr	r1, [r3, #16]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	2207      	movs	r2, #7
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	400a      	ands	r2, r1
 8001246:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6919      	ldr	r1, [r3, #16]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	4603      	mov	r3, r0
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4403      	add	r3, r0
 8001260:	409a      	lsls	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b06      	cmp	r3, #6
 8001270:	d824      	bhi.n	80012bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b05      	subs	r3, #5
 8001284:	221f      	movs	r2, #31
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	400a      	ands	r2, r1
 8001292:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	3b05      	subs	r3, #5
 80012ae:	fa00 f203 	lsl.w	r2, r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ba:	e04c      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d824      	bhi.n	800130e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	3b23      	subs	r3, #35	; 0x23
 80012d6:	221f      	movs	r2, #31
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43da      	mvns	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	400a      	ands	r2, r1
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	3b23      	subs	r3, #35	; 0x23
 8001300:	fa00 f203 	lsl.w	r2, r0, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
 800130c:	e023      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b41      	subs	r3, #65	; 0x41
 8001320:	221f      	movs	r2, #31
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	400a      	ands	r2, r1
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	3b41      	subs	r3, #65	; 0x41
 800134a:	fa00 f203 	lsl.w	r2, r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_ADC_ConfigChannel+0x250>)
 8001358:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a28      	ldr	r2, [pc, #160]	; (8001400 <HAL_ADC_ConfigChannel+0x254>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d10f      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1d8>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b12      	cmp	r3, #18
 800136a:	d10b      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <HAL_ADC_ConfigChannel+0x254>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12b      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x23a>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_ADC_ConfigChannel+0x258>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d003      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0x1f4>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b11      	cmp	r3, #17
 800139e:	d122      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a11      	ldr	r2, [pc, #68]	; (8001404 <HAL_ADC_ConfigChannel+0x258>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d111      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_ADC_ConfigChannel+0x25c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_ADC_ConfigChannel+0x260>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	0c9a      	lsrs	r2, r3, #18
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013d8:	e002      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f9      	bne.n	80013da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40012300 	.word	0x40012300
 8001400:	40012000 	.word	0x40012000
 8001404:	10000012 	.word	0x10000012
 8001408:	20000000 	.word	0x20000000
 800140c:	431bde83 	.word	0x431bde83

08001410 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001418:	4b79      	ldr	r3, [pc, #484]	; (8001600 <ADC_Init+0x1f0>)
 800141a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	431a      	orrs	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	021a      	lsls	r2, r3, #8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800148a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6899      	ldr	r1, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	4a58      	ldr	r2, [pc, #352]	; (8001604 <ADC_Init+0x1f4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d022      	beq.n	80014ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6899      	ldr	r1, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6899      	ldr	r1, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	e00f      	b.n	800150e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800150c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0202 	bic.w	r2, r2, #2
 800151c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6899      	ldr	r1, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7e1b      	ldrb	r3, [r3, #24]
 8001528:	005a      	lsls	r2, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01b      	beq.n	8001574 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800154a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800155a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	3b01      	subs	r3, #1
 8001568:	035a      	lsls	r2, r3, #13
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	e007      	b.n	8001584 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001582:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	3b01      	subs	r3, #1
 80015a0:	051a      	lsls	r2, r3, #20
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6899      	ldr	r1, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015c6:	025a      	lsls	r2, r3, #9
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6899      	ldr	r1, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	029a      	lsls	r2, r3, #10
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	609a      	str	r2, [r3, #8]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40012300 	.word	0x40012300
 8001604:	0f000001 	.word	0x0f000001

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4907      	ldr	r1, [pc, #28]	; (80016a4 <__NVIC_EnableIRQ+0x38>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f7ff ff8e 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff29 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff3e 	bl	8001650 <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff8e 	bl	80016fc <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff5d 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff31 	bl	800166c <__NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffa2 	bl	8001764 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff fc68 	bl	800110c <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e099      	b.n	800197c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001868:	e00f      	b.n	800188a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800186a:	f7ff fc4f 	bl	800110c <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b05      	cmp	r3, #5
 8001876:	d908      	bls.n	800188a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2220      	movs	r2, #32
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e078      	b.n	800197c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e8      	bne.n	800186a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	4b38      	ldr	r3, [pc, #224]	; (8001984 <HAL_DMA_Init+0x158>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d107      	bne.n	80018f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	4313      	orrs	r3, r2
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f023 0307 	bic.w	r3, r3, #7
 800190a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4313      	orrs	r3, r2
 8001914:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	2b04      	cmp	r3, #4
 800191c:	d117      	bne.n	800194e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4313      	orrs	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00e      	beq.n	800194e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fb01 	bl	8001f38 <DMA_CheckFifoParam>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2240      	movs	r2, #64	; 0x40
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800194a:	2301      	movs	r3, #1
 800194c:	e016      	b.n	800197c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fab8 	bl	8001ecc <DMA_CalcBaseAndBitshift>
 800195c:	4603      	mov	r3, r0
 800195e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	223f      	movs	r2, #63	; 0x3f
 8001966:	409a      	lsls	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	f010803f 	.word	0xf010803f

08001988 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_DMA_Start_IT+0x26>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e040      	b.n	8001a30 <HAL_DMA_Start_IT+0xa8>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d12f      	bne.n	8001a22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2202      	movs	r2, #2
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 fa4a 	bl	8001e70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	223f      	movs	r2, #63	; 0x3f
 80019e2:	409a      	lsls	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0216 	orr.w	r2, r2, #22
 80019f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0208 	orr.w	r2, r2, #8
 8001a0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e005      	b.n	8001a2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a46:	f7ff fb61 	bl	800110c <HAL_GetTick>
 8001a4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d008      	beq.n	8001a6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e052      	b.n	8001b10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0216 	bic.w	r2, r2, #22
 8001a78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d103      	bne.n	8001a9a <HAL_DMA_Abort+0x62>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0208 	bic.w	r2, r2, #8
 8001aa8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aba:	e013      	b.n	8001ae4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001abc:	f7ff fb26 	bl	800110c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d90c      	bls.n	8001ae4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2220      	movs	r2, #32
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e015      	b.n	8001b10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1e4      	bne.n	8001abc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af6:	223f      	movs	r2, #63	; 0x3f
 8001af8:	409a      	lsls	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d004      	beq.n	8001b36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00c      	b.n	8001b50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2205      	movs	r2, #5
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b68:	4b8e      	ldr	r3, [pc, #568]	; (8001da4 <HAL_DMA_IRQHandler+0x248>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a8e      	ldr	r2, [pc, #568]	; (8001da8 <HAL_DMA_IRQHandler+0x24c>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0a9b      	lsrs	r3, r3, #10
 8001b74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b86:	2208      	movs	r2, #8
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01a      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0204 	bic.w	r2, r2, #4
 8001bae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc0:	f043 0201 	orr.w	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bcc:	2201      	movs	r2, #1
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d012      	beq.n	8001bfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bea:	2201      	movs	r2, #1
 8001bec:	409a      	lsls	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf6:	f043 0202 	orr.w	r2, r3, #2
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c02:	2204      	movs	r2, #4
 8001c04:	409a      	lsls	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d012      	beq.n	8001c34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00b      	beq.n	8001c34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	2204      	movs	r2, #4
 8001c22:	409a      	lsls	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	f043 0204 	orr.w	r2, r3, #4
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	2210      	movs	r2, #16
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d043      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d03c      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2210      	movs	r2, #16
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d018      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d108      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d024      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
 8001c8a:	e01f      	b.n	8001ccc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01b      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
 8001c9c:	e016      	b.n	8001ccc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0208 	bic.w	r2, r2, #8
 8001cba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 808f 	beq.w	8001dfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8087 	beq.w	8001dfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d136      	bne.n	8001d74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0216 	bic.w	r2, r2, #22
 8001d14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695a      	ldr	r2, [r3, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <HAL_DMA_IRQHandler+0x1da>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0208 	bic.w	r2, r2, #8
 8001d44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	223f      	movs	r2, #63	; 0x3f
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d07e      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
        }
        return;
 8001d72:	e079      	b.n	8001e68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01d      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10d      	bne.n	8001dac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d031      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
 8001da0:	e02c      	b.n	8001dfc <HAL_DMA_IRQHandler+0x2a0>
 8001da2:	bf00      	nop
 8001da4:	20000000 	.word	0x20000000
 8001da8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d023      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
 8001dbc:	e01e      	b.n	8001dfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10f      	bne.n	8001dec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0210 	bic.w	r2, r2, #16
 8001dda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d032      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d022      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2205      	movs	r2, #5
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d307      	bcc.n	8001e44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f2      	bne.n	8001e28 <HAL_DMA_IRQHandler+0x2cc>
 8001e42:	e000      	b.n	8001e46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	4798      	blx	r3
 8001e66:	e000      	b.n	8001e6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e68:	bf00      	nop
    }
  }
}
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d108      	bne.n	8001eb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eae:	e007      	b.n	8001ec0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	3b10      	subs	r3, #16
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <DMA_CalcBaseAndBitshift+0x64>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ee6:	4a13      	ldr	r2, [pc, #76]	; (8001f34 <DMA_CalcBaseAndBitshift+0x68>)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d909      	bls.n	8001f0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	1d1a      	adds	r2, r3, #4
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f0c:	e007      	b.n	8001f1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f16:	f023 0303 	bic.w	r3, r3, #3
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	aaaaaaab 	.word	0xaaaaaaab
 8001f34:	080047d0 	.word	0x080047d0

08001f38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d11f      	bne.n	8001f92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d856      	bhi.n	8002006 <DMA_CheckFifoParam+0xce>
 8001f58:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <DMA_CheckFifoParam+0x28>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f83 	.word	0x08001f83
 8001f68:	08001f71 	.word	0x08001f71
 8001f6c:	08002007 	.word	0x08002007
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d046      	beq.n	800200a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f80:	e043      	b.n	800200a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f8a:	d140      	bne.n	800200e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f90:	e03d      	b.n	800200e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f9a:	d121      	bne.n	8001fe0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d837      	bhi.n	8002012 <DMA_CheckFifoParam+0xda>
 8001fa2:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <DMA_CheckFifoParam+0x70>)
 8001fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fbf 	.word	0x08001fbf
 8001fb0:	08001fb9 	.word	0x08001fb9
 8001fb4:	08001fd1 	.word	0x08001fd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
      break;
 8001fbc:	e030      	b.n	8002020 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d025      	beq.n	8002016 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fce:	e022      	b.n	8002016 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fd8:	d11f      	bne.n	800201a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fde:	e01c      	b.n	800201a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d903      	bls.n	8001fee <DMA_CheckFifoParam+0xb6>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d003      	beq.n	8001ff4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fec:	e018      	b.n	8002020 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff2:	e015      	b.n	8002020 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00e      	beq.n	800201e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
      break;
 8002004:	e00b      	b.n	800201e <DMA_CheckFifoParam+0xe6>
      break;
 8002006:	bf00      	nop
 8002008:	e00a      	b.n	8002020 <DMA_CheckFifoParam+0xe8>
      break;
 800200a:	bf00      	nop
 800200c:	e008      	b.n	8002020 <DMA_CheckFifoParam+0xe8>
      break;
 800200e:	bf00      	nop
 8002010:	e006      	b.n	8002020 <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e004      	b.n	8002020 <DMA_CheckFifoParam+0xe8>
      break;
 8002016:	bf00      	nop
 8002018:	e002      	b.n	8002020 <DMA_CheckFifoParam+0xe8>
      break;   
 800201a:	bf00      	nop
 800201c:	e000      	b.n	8002020 <DMA_CheckFifoParam+0xe8>
      break;
 800201e:	bf00      	nop
    }
  } 
  
  return status; 
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e159      	b.n	8002300 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 8148 	bne.w	80022fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d005      	beq.n	8002082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	2b02      	cmp	r3, #2
 8002080:	d130      	bne.n	80020e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 0201 	and.w	r2, r3, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d017      	beq.n	8002120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d123      	bne.n	8002174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	08da      	lsrs	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	69b9      	ldr	r1, [r7, #24]
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80a2 	beq.w	80022fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b57      	ldr	r3, [pc, #348]	; (8002318 <HAL_GPIO_Init+0x2e8>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	4a56      	ldr	r2, [pc, #344]	; (8002318 <HAL_GPIO_Init+0x2e8>)
 80021c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c4:	6453      	str	r3, [r2, #68]	; 0x44
 80021c6:	4b54      	ldr	r3, [pc, #336]	; (8002318 <HAL_GPIO_Init+0x2e8>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d2:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_GPIO_Init+0x2ec>)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a49      	ldr	r2, [pc, #292]	; (8002320 <HAL_GPIO_Init+0x2f0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d019      	beq.n	8002232 <HAL_GPIO_Init+0x202>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a48      	ldr	r2, [pc, #288]	; (8002324 <HAL_GPIO_Init+0x2f4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0x1fe>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a47      	ldr	r2, [pc, #284]	; (8002328 <HAL_GPIO_Init+0x2f8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00d      	beq.n	800222a <HAL_GPIO_Init+0x1fa>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a46      	ldr	r2, [pc, #280]	; (800232c <HAL_GPIO_Init+0x2fc>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d007      	beq.n	8002226 <HAL_GPIO_Init+0x1f6>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a45      	ldr	r2, [pc, #276]	; (8002330 <HAL_GPIO_Init+0x300>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d101      	bne.n	8002222 <HAL_GPIO_Init+0x1f2>
 800221e:	2304      	movs	r3, #4
 8002220:	e008      	b.n	8002234 <HAL_GPIO_Init+0x204>
 8002222:	2307      	movs	r3, #7
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x204>
 8002226:	2303      	movs	r3, #3
 8002228:	e004      	b.n	8002234 <HAL_GPIO_Init+0x204>
 800222a:	2302      	movs	r3, #2
 800222c:	e002      	b.n	8002234 <HAL_GPIO_Init+0x204>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_GPIO_Init+0x204>
 8002232:	2300      	movs	r3, #0
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	f002 0203 	and.w	r2, r2, #3
 800223a:	0092      	lsls	r2, r2, #2
 800223c:	4093      	lsls	r3, r2
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002244:	4935      	ldr	r1, [pc, #212]	; (800231c <HAL_GPIO_Init+0x2ec>)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <HAL_GPIO_Init+0x304>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002276:	4a2f      	ldr	r2, [pc, #188]	; (8002334 <HAL_GPIO_Init+0x304>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_GPIO_Init+0x304>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a0:	4a24      	ldr	r2, [pc, #144]	; (8002334 <HAL_GPIO_Init+0x304>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022a6:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_GPIO_Init+0x304>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ca:	4a1a      	ldr	r2, [pc, #104]	; (8002334 <HAL_GPIO_Init+0x304>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <HAL_GPIO_Init+0x304>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f4:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <HAL_GPIO_Init+0x304>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3301      	adds	r3, #1
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b0f      	cmp	r3, #15
 8002304:	f67f aea2 	bls.w	800204c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3724      	adds	r7, #36	; 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	40013800 	.word	0x40013800
 8002320:	40020000 	.word	0x40020000
 8002324:	40020400 	.word	0x40020400
 8002328:	40020800 	.word	0x40020800
 800232c:	40020c00 	.word	0x40020c00
 8002330:	40021000 	.word	0x40021000
 8002334:	40013c00 	.word	0x40013c00

08002338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002348:	787b      	ldrb	r3, [r7, #1]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002354:	e003      	b.n	800235e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	619a      	str	r2, [r3, #24]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e267      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d075      	beq.n	8002476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238a:	4b88      	ldr	r3, [pc, #544]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d00c      	beq.n	80023b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002396:	4b85      	ldr	r3, [pc, #532]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d112      	bne.n	80023c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a2:	4b82      	ldr	r3, [pc, #520]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ae:	d10b      	bne.n	80023c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	4b7e      	ldr	r3, [pc, #504]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d05b      	beq.n	8002474 <HAL_RCC_OscConfig+0x108>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d157      	bne.n	8002474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e242      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d0:	d106      	bne.n	80023e0 <HAL_RCC_OscConfig+0x74>
 80023d2:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a75      	ldr	r2, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e01d      	b.n	800241c <HAL_RCC_OscConfig+0xb0>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x98>
 80023ea:	4b70      	ldr	r3, [pc, #448]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6f      	ldr	r2, [pc, #444]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6c      	ldr	r2, [pc, #432]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0xb0>
 8002404:	4b69      	ldr	r3, [pc, #420]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a68      	ldr	r2, [pc, #416]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b66      	ldr	r3, [pc, #408]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a65      	ldr	r2, [pc, #404]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fe72 	bl	800110c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe fe6e 	bl	800110c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e207      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b5b      	ldr	r3, [pc, #364]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0xc0>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe fe5e 	bl	800110c <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe fe5a 	bl	800110c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e1f3      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	4b51      	ldr	r3, [pc, #324]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0xe8>
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d063      	beq.n	800254a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002482:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002496:	2b08      	cmp	r3, #8
 8002498:	d11c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249a:	4b44      	ldr	r3, [pc, #272]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d116      	bne.n	80024d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_RCC_OscConfig+0x152>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e1c7      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4937      	ldr	r1, [pc, #220]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	e03a      	b.n	800254a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d020      	beq.n	800251e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024dc:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <HAL_RCC_OscConfig+0x244>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe fe13 	bl	800110c <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ea:	f7fe fe0f 	bl	800110c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e1a8      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4925      	ldr	r1, [pc, #148]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]
 800251c:	e015      	b.n	800254a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251e:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fdf2 	bl	800110c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252c:	f7fe fdee 	bl	800110c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e187      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d036      	beq.n	80025c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d016      	beq.n	800258c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_RCC_OscConfig+0x248>)
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7fe fdd2 	bl	800110c <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256c:	f7fe fdce 	bl	800110c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e167      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x200>
 800258a:	e01b      	b.n	80025c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_OscConfig+0x248>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7fe fdbb 	bl	800110c <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002598:	e00e      	b.n	80025b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259a:	f7fe fdb7 	bl	800110c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d907      	bls.n	80025b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e150      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
 80025ac:	40023800 	.word	0x40023800
 80025b0:	42470000 	.word	0x42470000
 80025b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	4b88      	ldr	r3, [pc, #544]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80025ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ea      	bne.n	800259a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8097 	beq.w	8002700 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d6:	4b81      	ldr	r3, [pc, #516]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10f      	bne.n	8002602 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	4b7d      	ldr	r3, [pc, #500]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4a7c      	ldr	r2, [pc, #496]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40
 80025f2:	4b7a      	ldr	r3, [pc, #488]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fe:	2301      	movs	r3, #1
 8002600:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002602:	4b77      	ldr	r3, [pc, #476]	; (80027e0 <HAL_RCC_OscConfig+0x474>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d118      	bne.n	8002640 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260e:	4b74      	ldr	r3, [pc, #464]	; (80027e0 <HAL_RCC_OscConfig+0x474>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a73      	ldr	r2, [pc, #460]	; (80027e0 <HAL_RCC_OscConfig+0x474>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261a:	f7fe fd77 	bl	800110c <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002622:	f7fe fd73 	bl	800110c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e10c      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	4b6a      	ldr	r3, [pc, #424]	; (80027e0 <HAL_RCC_OscConfig+0x474>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x2ea>
 8002648:	4b64      	ldr	r3, [pc, #400]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a63      	ldr	r2, [pc, #396]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	e01c      	b.n	8002690 <HAL_RCC_OscConfig+0x324>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b05      	cmp	r3, #5
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x30c>
 800265e:	4b5f      	ldr	r3, [pc, #380]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	4a5e      	ldr	r2, [pc, #376]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	6713      	str	r3, [r2, #112]	; 0x70
 800266a:	4b5c      	ldr	r3, [pc, #368]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a5b      	ldr	r2, [pc, #364]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
 8002676:	e00b      	b.n	8002690 <HAL_RCC_OscConfig+0x324>
 8002678:	4b58      	ldr	r3, [pc, #352]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	4a57      	ldr	r2, [pc, #348]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	6713      	str	r3, [r2, #112]	; 0x70
 8002684:	4b55      	ldr	r3, [pc, #340]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a54      	ldr	r2, [pc, #336]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 0304 	bic.w	r3, r3, #4
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d015      	beq.n	80026c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe fd38 	bl	800110c <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7fe fd34 	bl	800110c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e0cb      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b6:	4b49      	ldr	r3, [pc, #292]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0ee      	beq.n	80026a0 <HAL_RCC_OscConfig+0x334>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c4:	f7fe fd22 	bl	800110c <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7fe fd1e 	bl	800110c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e0b5      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e2:	4b3e      	ldr	r3, [pc, #248]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ee      	bne.n	80026cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d105      	bne.n	8002700 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f4:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	4a38      	ldr	r2, [pc, #224]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80026fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a1 	beq.w	800284c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800270a:	4b34      	ldr	r3, [pc, #208]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b08      	cmp	r3, #8
 8002714:	d05c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d141      	bne.n	80027a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271e:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <HAL_RCC_OscConfig+0x478>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe fcf2 	bl	800110c <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe fcee 	bl	800110c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e087      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	019b      	lsls	r3, r3, #6
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	3b01      	subs	r3, #1
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	491b      	ldr	r1, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x478>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe fcc7 	bl	800110c <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002782:	f7fe fcc3 	bl	800110c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e05c      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x416>
 80027a0:	e054      	b.n	800284c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_RCC_OscConfig+0x478>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe fcb0 	bl	800110c <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe fcac 	bl	800110c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e045      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x444>
 80027ce:	e03d      	b.n	800284c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e038      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40007000 	.word	0x40007000
 80027e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x4ec>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d028      	beq.n	8002848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d121      	bne.n	8002848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d11a      	bne.n	8002848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002818:	4013      	ands	r3, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800281e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002820:	4293      	cmp	r3, r2
 8002822:	d111      	bne.n	8002848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	3b01      	subs	r3, #1
 8002832:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d107      	bne.n	8002848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800

0800285c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0cc      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002870:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d90c      	bls.n	8002898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0b8      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b0:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a58      	ldr	r2, [pc, #352]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a52      	ldr	r2, [pc, #328]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d4:	4b50      	ldr	r3, [pc, #320]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	494d      	ldr	r1, [pc, #308]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d044      	beq.n	800297c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d119      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e07f      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d003      	beq.n	800291a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002916:	2b03      	cmp	r3, #3
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e06f      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e067      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4934      	ldr	r1, [pc, #208]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800294c:	f7fe fbde 	bl	800110c <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fe fbda 	bl	800110c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e04f      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 020c 	and.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d1eb      	bne.n	8002954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d20c      	bcs.n	80029a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e032      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4916      	ldr	r1, [pc, #88]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d009      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029e2:	f000 f821 	bl	8002a28 <HAL_RCC_GetSysClockFreq>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	490a      	ldr	r1, [pc, #40]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	5ccb      	ldrb	r3, [r1, r3]
 80029f6:	fa22 f303 	lsr.w	r3, r2, r3
 80029fa:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_ClockConfig+0x1c8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fb3e 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023c00 	.word	0x40023c00
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	080047b8 	.word	0x080047b8
 8002a20:	20000000 	.word	0x20000000
 8002a24:	20000004 	.word	0x20000004

08002a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a2c:	b094      	sub	sp, #80	; 0x50
 8002a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	647b      	str	r3, [r7, #68]	; 0x44
 8002a34:	2300      	movs	r3, #0
 8002a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a38:	2300      	movs	r3, #0
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a40:	4b79      	ldr	r3, [pc, #484]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d00d      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x40>
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	f200 80e1 	bhi.w	8002c14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x34>
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d003      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a5a:	e0db      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a5c:	4b73      	ldr	r3, [pc, #460]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a60:	e0db      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a62:	4b73      	ldr	r3, [pc, #460]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a66:	e0d8      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a68:	4b6f      	ldr	r3, [pc, #444]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a72:	4b6d      	ldr	r3, [pc, #436]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d063      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7e:	4b6a      	ldr	r3, [pc, #424]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	099b      	lsrs	r3, r3, #6
 8002a84:	2200      	movs	r2, #0
 8002a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
 8002a92:	2300      	movs	r3, #0
 8002a94:	637b      	str	r3, [r7, #52]	; 0x34
 8002a96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a9a:	4622      	mov	r2, r4
 8002a9c:	462b      	mov	r3, r5
 8002a9e:	f04f 0000 	mov.w	r0, #0
 8002aa2:	f04f 0100 	mov.w	r1, #0
 8002aa6:	0159      	lsls	r1, r3, #5
 8002aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aac:	0150      	lsls	r0, r2, #5
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	1a51      	subs	r1, r2, r1
 8002ab6:	6139      	str	r1, [r7, #16]
 8002ab8:	4629      	mov	r1, r5
 8002aba:	eb63 0301 	sbc.w	r3, r3, r1
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002acc:	4659      	mov	r1, fp
 8002ace:	018b      	lsls	r3, r1, #6
 8002ad0:	4651      	mov	r1, sl
 8002ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ad6:	4651      	mov	r1, sl
 8002ad8:	018a      	lsls	r2, r1, #6
 8002ada:	4651      	mov	r1, sl
 8002adc:	ebb2 0801 	subs.w	r8, r2, r1
 8002ae0:	4659      	mov	r1, fp
 8002ae2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002afa:	4690      	mov	r8, r2
 8002afc:	4699      	mov	r9, r3
 8002afe:	4623      	mov	r3, r4
 8002b00:	eb18 0303 	adds.w	r3, r8, r3
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	462b      	mov	r3, r5
 8002b08:	eb49 0303 	adc.w	r3, r9, r3
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	024b      	lsls	r3, r1, #9
 8002b1e:	4621      	mov	r1, r4
 8002b20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b24:	4621      	mov	r1, r4
 8002b26:	024a      	lsls	r2, r1, #9
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2e:	2200      	movs	r2, #0
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b38:	f7fd fb4e 	bl	80001d8 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4613      	mov	r3, r2
 8002b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b44:	e058      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b46:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	4611      	mov	r1, r2
 8002b52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b60:	4642      	mov	r2, r8
 8002b62:	464b      	mov	r3, r9
 8002b64:	f04f 0000 	mov.w	r0, #0
 8002b68:	f04f 0100 	mov.w	r1, #0
 8002b6c:	0159      	lsls	r1, r3, #5
 8002b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b72:	0150      	lsls	r0, r2, #5
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4641      	mov	r1, r8
 8002b7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b7e:	4649      	mov	r1, r9
 8002b80:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b98:	ebb2 040a 	subs.w	r4, r2, sl
 8002b9c:	eb63 050b 	sbc.w	r5, r3, fp
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	00eb      	lsls	r3, r5, #3
 8002baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bae:	00e2      	lsls	r2, r4, #3
 8002bb0:	4614      	mov	r4, r2
 8002bb2:	461d      	mov	r5, r3
 8002bb4:	4643      	mov	r3, r8
 8002bb6:	18e3      	adds	r3, r4, r3
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	464b      	mov	r3, r9
 8002bbc:	eb45 0303 	adc.w	r3, r5, r3
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bce:	4629      	mov	r1, r5
 8002bd0:	028b      	lsls	r3, r1, #10
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd8:	4621      	mov	r1, r4
 8002bda:	028a      	lsls	r2, r1, #10
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be2:	2200      	movs	r2, #0
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	61fa      	str	r2, [r7, #28]
 8002be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bec:	f7fd faf4 	bl	80001d8 <__aeabi_uldivmod>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	3301      	adds	r3, #1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c12:	e002      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3750      	adds	r7, #80	; 0x50
 8002c20:	46bd      	mov	sp, r7
 8002c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	00f42400 	.word	0x00f42400
 8002c30:	007a1200 	.word	0x007a1200

08002c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000000 	.word	0x20000000

08002c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c50:	f7ff fff0 	bl	8002c34 <HAL_RCC_GetHCLKFreq>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	0a9b      	lsrs	r3, r3, #10
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	4903      	ldr	r1, [pc, #12]	; (8002c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c62:	5ccb      	ldrb	r3, [r1, r3]
 8002c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	080047c8 	.word	0x080047c8

08002c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c78:	f7ff ffdc 	bl	8002c34 <HAL_RCC_GetHCLKFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	0b5b      	lsrs	r3, r3, #13
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4903      	ldr	r1, [pc, #12]	; (8002c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	080047c8 	.word	0x080047c8

08002c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e041      	b.n	8002d32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe f88a 	bl	8000ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f000 fa24 	bl	8003128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e097      	b.n	8002e7e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fd ffc0 	bl	8000ce8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d7e:	f023 0307 	bic.w	r3, r3, #7
 8002d82:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f000 f9ca 	bl	8003128 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	f023 0303 	bic.w	r3, r3, #3
 8002dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002dda:	f023 030c 	bic.w	r3, r3, #12
 8002dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	4313      	orrs	r3, r2
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	011a      	lsls	r2, r3, #4
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	031b      	lsls	r3, r3, #12
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e18:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002e20:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e96:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ea6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002eae:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d110      	bne.n	8002ed8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d102      	bne.n	8002ec2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ebc:	7b7b      	ldrb	r3, [r7, #13]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e069      	b.n	8002f9a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed6:	e031      	b.n	8002f3c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d110      	bne.n	8002f00 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ede:	7bbb      	ldrb	r3, [r7, #14]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d102      	bne.n	8002eea <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ee4:	7b3b      	ldrb	r3, [r7, #12]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d001      	beq.n	8002eee <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e055      	b.n	8002f9a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002efe:	e01d      	b.n	8002f3c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d108      	bne.n	8002f18 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f06:	7bbb      	ldrb	r3, [r7, #14]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d105      	bne.n	8002f18 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f0c:	7b7b      	ldrb	r3, [r7, #13]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d102      	bne.n	8002f18 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f12:	7b3b      	ldrb	r3, [r7, #12]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d001      	beq.n	8002f1c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e03e      	b.n	8002f9a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_Encoder_Start+0xc4>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d008      	beq.n	8002f5a <HAL_TIM_Encoder_Start+0xd4>
 8002f48:	e00f      	b.n	8002f6a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fb00 	bl	8003558 <TIM_CCxChannelCmd>
      break;
 8002f58:	e016      	b.n	8002f88 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	2104      	movs	r1, #4
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 faf8 	bl	8003558 <TIM_CCxChannelCmd>
      break;
 8002f68:	e00e      	b.n	8002f88 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 faf0 	bl	8003558 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	2104      	movs	r1, #4
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fae9 	bl	8003558 <TIM_CCxChannelCmd>
      break;
 8002f86:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e0ae      	b.n	8003120 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	f200 809f 	bhi.w	8003110 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fd2:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	0800300d 	.word	0x0800300d
 8002fdc:	08003111 	.word	0x08003111
 8002fe0:	08003111 	.word	0x08003111
 8002fe4:	08003111 	.word	0x08003111
 8002fe8:	0800304d 	.word	0x0800304d
 8002fec:	08003111 	.word	0x08003111
 8002ff0:	08003111 	.word	0x08003111
 8002ff4:	08003111 	.word	0x08003111
 8002ff8:	0800308f 	.word	0x0800308f
 8002ffc:	08003111 	.word	0x08003111
 8003000:	08003111 	.word	0x08003111
 8003004:	08003111 	.word	0x08003111
 8003008:	080030cf 	.word	0x080030cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f914 	bl	8003240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0208 	orr.w	r2, r2, #8
 8003026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0204 	bic.w	r2, r2, #4
 8003036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6999      	ldr	r1, [r3, #24]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	619a      	str	r2, [r3, #24]
      break;
 800304a:	e064      	b.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 f95a 	bl	800330c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6999      	ldr	r1, [r3, #24]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	021a      	lsls	r2, r3, #8
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	619a      	str	r2, [r3, #24]
      break;
 800308c:	e043      	b.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	4618      	mov	r0, r3
 8003096:	f000 f9a5 	bl	80033e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69da      	ldr	r2, [r3, #28]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0208 	orr.w	r2, r2, #8
 80030a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0204 	bic.w	r2, r2, #4
 80030b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69d9      	ldr	r1, [r3, #28]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	61da      	str	r2, [r3, #28]
      break;
 80030cc:	e023      	b.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f9ef 	bl	80034b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69d9      	ldr	r1, [r3, #28]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	021a      	lsls	r2, r3, #8
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	61da      	str	r2, [r3, #28]
      break;
 800310e:	e002      	b.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	75fb      	strb	r3, [r7, #23]
      break;
 8003114:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <TIM_Base_SetConfig+0xfc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00f      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d00b      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a37      	ldr	r2, [pc, #220]	; (8003228 <TIM_Base_SetConfig+0x100>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a36      	ldr	r2, [pc, #216]	; (800322c <TIM_Base_SetConfig+0x104>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a35      	ldr	r2, [pc, #212]	; (8003230 <TIM_Base_SetConfig+0x108>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d108      	bne.n	8003172 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a2b      	ldr	r2, [pc, #172]	; (8003224 <TIM_Base_SetConfig+0xfc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01b      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003180:	d017      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a28      	ldr	r2, [pc, #160]	; (8003228 <TIM_Base_SetConfig+0x100>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a27      	ldr	r2, [pc, #156]	; (800322c <TIM_Base_SetConfig+0x104>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00f      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a26      	ldr	r2, [pc, #152]	; (8003230 <TIM_Base_SetConfig+0x108>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00b      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a25      	ldr	r2, [pc, #148]	; (8003234 <TIM_Base_SetConfig+0x10c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d007      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a24      	ldr	r2, [pc, #144]	; (8003238 <TIM_Base_SetConfig+0x110>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d003      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a23      	ldr	r2, [pc, #140]	; (800323c <TIM_Base_SetConfig+0x114>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d108      	bne.n	80031c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <TIM_Base_SetConfig+0xfc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d103      	bne.n	80031f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d105      	bne.n	8003216 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f023 0201 	bic.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	611a      	str	r2, [r3, #16]
  }
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40010000 	.word	0x40010000
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40014000 	.word	0x40014000
 8003238:	40014400 	.word	0x40014400
 800323c:	40014800 	.word	0x40014800

08003240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f023 0201 	bic.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f023 0302 	bic.w	r3, r3, #2
 8003288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <TIM_OC1_SetConfig+0xc8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10c      	bne.n	80032b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f023 0308 	bic.w	r3, r3, #8
 80032a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a13      	ldr	r2, [pc, #76]	; (8003308 <TIM_OC1_SetConfig+0xc8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d111      	bne.n	80032e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	621a      	str	r2, [r3, #32]
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40010000 	.word	0x40010000

0800330c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f023 0210 	bic.w	r2, r3, #16
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f023 0320 	bic.w	r3, r3, #32
 8003356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <TIM_OC2_SetConfig+0xd4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d10d      	bne.n	8003388 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003386:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <TIM_OC2_SetConfig+0xd4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d113      	bne.n	80033b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800339e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010000 	.word	0x40010000

080033e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0303 	bic.w	r3, r3, #3
 800341a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800342c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a1d      	ldr	r2, [pc, #116]	; (80034b4 <TIM_OC3_SetConfig+0xd0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10d      	bne.n	800345e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800345c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <TIM_OC3_SetConfig+0xd0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d113      	bne.n	800348e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800346c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	621a      	str	r2, [r3, #32]
}
 80034a8:	bf00      	nop
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40010000 	.word	0x40010000

080034b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	031b      	lsls	r3, r3, #12
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <TIM_OC4_SetConfig+0x9c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d109      	bne.n	800352c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800351e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	019b      	lsls	r3, r3, #6
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	621a      	str	r2, [r3, #32]
}
 8003546:	bf00      	nop
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40010000 	.word	0x40010000

08003558 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2201      	movs	r2, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a1a      	ldr	r2, [r3, #32]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	43db      	mvns	r3, r3
 800357a:	401a      	ands	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1a      	ldr	r2, [r3, #32]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	431a      	orrs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e050      	b.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1c      	ldr	r2, [pc, #112]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d018      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003608:	d013      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a18      	ldr	r2, [pc, #96]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00e      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a16      	ldr	r2, [pc, #88]	; (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d009      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a15      	ldr	r2, [pc, #84]	; (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a13      	ldr	r2, [pc, #76]	; (800367c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10c      	bne.n	800364c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	4313      	orrs	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800
 8003678:	40000c00 	.word	0x40000c00
 800367c:	40014000 	.word	0x40014000

08003680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e042      	b.n	8003718 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd fc1e 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	; 0x24
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fdcb 	bl	8004260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08c      	sub	sp, #48	; 0x30
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	4613      	mov	r3, r2
 800372c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b20      	cmp	r3, #32
 8003738:	d156      	bne.n	80037e8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_UART_Transmit_DMA+0x26>
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e04f      	b.n	80037ea <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	88fa      	ldrh	r2, [r7, #6]
 8003754:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	88fa      	ldrh	r2, [r7, #6]
 800375a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2221      	movs	r2, #33	; 0x21
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <HAL_UART_Transmit_DMA+0xd4>)
 8003770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <HAL_UART_Transmit_DMA+0xd8>)
 8003778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <HAL_UART_Transmit_DMA+0xdc>)
 8003780:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	2200      	movs	r2, #0
 8003788:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800378a:	f107 0308 	add.w	r3, r7, #8
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	6819      	ldr	r1, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3304      	adds	r3, #4
 800379e:	461a      	mov	r2, r3
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	f7fe f8f1 	bl	8001988 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3314      	adds	r3, #20
 80037b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	617b      	str	r3, [r7, #20]
   return(result);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3314      	adds	r3, #20
 80037ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d0:	627a      	str	r2, [r7, #36]	; 0x24
 80037d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6a39      	ldr	r1, [r7, #32]
 80037d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e5      	bne.n	80037b0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3730      	adds	r7, #48	; 0x30
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	08003d8d 	.word	0x08003d8d
 80037f8:	08003e27 	.word	0x08003e27
 80037fc:	08003e43 	.word	0x08003e43

08003800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b0ba      	sub	sp, #232	; 0xe8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800383e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_UART_IRQHandler+0x66>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fc40 	bl	80040e4 <UART_Receive_IT>
      return;
 8003864:	e25b      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80de 	beq.w	8003a2c <HAL_UART_IRQHandler+0x22c>
 8003870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800387c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003880:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80d1 	beq.w	8003a2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_UART_IRQHandler+0xae>
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <HAL_UART_IRQHandler+0xd2>
 80038ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f043 0202 	orr.w	r2, r3, #2
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_UART_IRQHandler+0xf6>
 80038de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f043 0204 	orr.w	r2, r3, #4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d011      	beq.n	8003926 <HAL_UART_IRQHandler+0x126>
 8003902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800390e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	f043 0208 	orr.w	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 81f2 	beq.w	8003d14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_UART_IRQHandler+0x14e>
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fbcb 	bl	80040e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003958:	2b40      	cmp	r3, #64	; 0x40
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <HAL_UART_IRQHandler+0x17a>
 8003972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d04f      	beq.n	8003a1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fad3 	bl	8003f26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d141      	bne.n	8003a12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3314      	adds	r3, #20
 8003994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3314      	adds	r3, #20
 80039b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1d9      	bne.n	800398e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d013      	beq.n	8003a0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	4a7e      	ldr	r2, [pc, #504]	; (8003be0 <HAL_UART_IRQHandler+0x3e0>)
 80039e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe f892 	bl	8001b18 <HAL_DMA_Abort_IT>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d016      	beq.n	8003a28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a04:	4610      	mov	r0, r2
 8003a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	e00e      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f9a8 	bl	8003d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	e00a      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9a4 	bl	8003d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	e006      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f9a0 	bl	8003d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003a26:	e175      	b.n	8003d14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	bf00      	nop
    return;
 8003a2a:	e173      	b.n	8003d14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	f040 814f 	bne.w	8003cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8148 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8141 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	f040 80b6 	bne.w	8003be4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8145 	beq.w	8003d18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a96:	429a      	cmp	r2, r3
 8003a98:	f080 813e 	bcs.w	8003d18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aae:	f000 8088 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ade:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1d9      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3314      	adds	r3, #20
 8003b04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3314      	adds	r3, #20
 8003b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e1      	bne.n	8003afe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3314      	adds	r3, #20
 8003b40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e3      	bne.n	8003b3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b92:	f023 0310 	bic.w	r3, r3, #16
 8003b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ba4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ba6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e3      	bne.n	8003b80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd ff3b 	bl	8001a38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f8cb 	bl	8003d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bde:	e09b      	b.n	8003d18 <HAL_UART_IRQHandler+0x518>
 8003be0:	08003fed 	.word	0x08003fed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 808e 	beq.w	8003d1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8089 	beq.w	8003d1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c2e:	647a      	str	r2, [r7, #68]	; 0x44
 8003c30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e3      	bne.n	8003c0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	623b      	str	r3, [r7, #32]
   return(result);
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3314      	adds	r3, #20
 8003c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c66:	633a      	str	r2, [r7, #48]	; 0x30
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e3      	bne.n	8003c42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0310 	bic.w	r3, r3, #16
 8003c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cac:	61fa      	str	r2, [r7, #28]
 8003cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	69b9      	ldr	r1, [r7, #24]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e3      	bne.n	8003c88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f851 	bl	8003d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd2:	e023      	b.n	8003d1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d009      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x4f4>
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f991 	bl	8004014 <UART_Transmit_IT>
    return;
 8003cf2:	e014      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <HAL_UART_IRQHandler+0x51e>
 8003d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f9d1 	bl	80040b4 <UART_EndTransmit_IT>
    return;
 8003d12:	e004      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
    return;
 8003d14:	bf00      	nop
 8003d16:	e002      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d18:	bf00      	nop
 8003d1a:	e000      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d1c:	bf00      	nop
  }
}
 8003d1e:	37e8      	adds	r7, #232	; 0xe8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b090      	sub	sp, #64	; 0x40
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d137      	bne.n	8003e18 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003daa:	2200      	movs	r2, #0
 8003dac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dce:	633a      	str	r2, [r7, #48]	; 0x30
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e5      	bne.n	8003dae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e02:	61fa      	str	r2, [r7, #28]
 8003e04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	69b9      	ldr	r1, [r7, #24]
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	617b      	str	r3, [r7, #20]
   return(result);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e5      	bne.n	8003de2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e16:	e002      	b.n	8003e1e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003e18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e1a:	f7ff ff83 	bl	8003d24 <HAL_UART_TxCpltCallback>
}
 8003e1e:	bf00      	nop
 8003e20:	3740      	adds	r7, #64	; 0x40
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff ff7f 	bl	8003d38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5e:	2b80      	cmp	r3, #128	; 0x80
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b21      	cmp	r3, #33	; 0x21
 8003e74:	d108      	bne.n	8003e88 <UART_DMAError+0x46>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e82:	68b8      	ldr	r0, [r7, #8]
 8003e84:	f000 f827 	bl	8003ed6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b22      	cmp	r3, #34	; 0x22
 8003ea8:	d108      	bne.n	8003ebc <UART_DMAError+0x7a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003eb6:	68b8      	ldr	r0, [r7, #8]
 8003eb8:	f000 f835 	bl	8003f26 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	f043 0210 	orr.w	r2, r3, #16
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ec8:	68b8      	ldr	r0, [r7, #8]
 8003eca:	f7ff ff49 	bl	8003d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b089      	sub	sp, #36	; 0x24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	61ba      	str	r2, [r7, #24]
 8003f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e5      	bne.n	8003ede <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003f1a:	bf00      	nop
 8003f1c:	3724      	adds	r7, #36	; 0x24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b095      	sub	sp, #84	; 0x54
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f4e:	643a      	str	r2, [r7, #64]	; 0x40
 8003f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e5      	bne.n	8003f2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3314      	adds	r3, #20
 8003f68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3314      	adds	r3, #20
 8003f80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e5      	bne.n	8003f62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d119      	bne.n	8003fd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f023 0310 	bic.w	r3, r3, #16
 8003fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fbe:	61ba      	str	r2, [r7, #24]
 8003fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6979      	ldr	r1, [r7, #20]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	613b      	str	r3, [r7, #16]
   return(result);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e5      	bne.n	8003f9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fe0:	bf00      	nop
 8003fe2:	3754      	adds	r7, #84	; 0x54
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f7ff feaa 	bl	8003d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b21      	cmp	r3, #33	; 0x21
 8004026:	d13e      	bne.n	80040a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004030:	d114      	bne.n	800405c <UART_Transmit_IT+0x48>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d110      	bne.n	800405c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800404e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	1c9a      	adds	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]
 800405a:	e008      	b.n	800406e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	1c59      	adds	r1, r3, #1
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6211      	str	r1, [r2, #32]
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29b      	uxth	r3, r3
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4619      	mov	r1, r3
 800407c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004090:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e000      	b.n	80040a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
  }
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff fe25 	bl	8003d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08c      	sub	sp, #48	; 0x30
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b22      	cmp	r3, #34	; 0x22
 80040f6:	f040 80ae 	bne.w	8004256 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004102:	d117      	bne.n	8004134 <UART_Receive_IT+0x50>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d113      	bne.n	8004134 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800410c:	2300      	movs	r3, #0
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004122:	b29a      	uxth	r2, r3
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	1c9a      	adds	r2, r3, #2
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	629a      	str	r2, [r3, #40]	; 0x28
 8004132:	e026      	b.n	8004182 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004146:	d007      	beq.n	8004158 <UART_Receive_IT+0x74>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <UART_Receive_IT+0x82>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	e008      	b.n	8004178 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004172:	b2da      	uxtb	r2, r3
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29b      	uxth	r3, r3
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4619      	mov	r1, r3
 8004190:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004192:	2b00      	cmp	r3, #0
 8004194:	d15d      	bne.n	8004252 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0220 	bic.w	r2, r2, #32
 80041a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d135      	bne.n	8004248 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	613b      	str	r3, [r7, #16]
   return(result);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f023 0310 	bic.w	r3, r3, #16
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004202:	623a      	str	r2, [r7, #32]
 8004204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	69f9      	ldr	r1, [r7, #28]
 8004208:	6a3a      	ldr	r2, [r7, #32]
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e5      	bne.n	80041e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b10      	cmp	r3, #16
 8004222:	d10a      	bne.n	800423a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff fd97 	bl	8003d74 <HAL_UARTEx_RxEventCallback>
 8004246:	e002      	b.n	800424e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff fd7f 	bl	8003d4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	e002      	b.n	8004258 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	3730      	adds	r7, #48	; 0x30
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004264:	b0c0      	sub	sp, #256	; 0x100
 8004266:	af00      	add	r7, sp, #0
 8004268:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	68d9      	ldr	r1, [r3, #12]
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	ea40 0301 	orr.w	r3, r0, r1
 8004288:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	431a      	orrs	r2, r3
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	431a      	orrs	r2, r3
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042b8:	f021 010c 	bic.w	r1, r1, #12
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042c6:	430b      	orrs	r3, r1
 80042c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042da:	6999      	ldr	r1, [r3, #24]
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	ea40 0301 	orr.w	r3, r0, r1
 80042e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b8f      	ldr	r3, [pc, #572]	; (800452c <UART_SetConfig+0x2cc>)
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d005      	beq.n	8004300 <UART_SetConfig+0xa0>
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b8d      	ldr	r3, [pc, #564]	; (8004530 <UART_SetConfig+0x2d0>)
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d104      	bne.n	800430a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004300:	f7fe fcb8 	bl	8002c74 <HAL_RCC_GetPCLK2Freq>
 8004304:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004308:	e003      	b.n	8004312 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800430a:	f7fe fc9f 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 800430e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800431c:	f040 810c 	bne.w	8004538 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800432a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800432e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004332:	4622      	mov	r2, r4
 8004334:	462b      	mov	r3, r5
 8004336:	1891      	adds	r1, r2, r2
 8004338:	65b9      	str	r1, [r7, #88]	; 0x58
 800433a:	415b      	adcs	r3, r3
 800433c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800433e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004342:	4621      	mov	r1, r4
 8004344:	eb12 0801 	adds.w	r8, r2, r1
 8004348:	4629      	mov	r1, r5
 800434a:	eb43 0901 	adc.w	r9, r3, r1
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800435e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004362:	4690      	mov	r8, r2
 8004364:	4699      	mov	r9, r3
 8004366:	4623      	mov	r3, r4
 8004368:	eb18 0303 	adds.w	r3, r8, r3
 800436c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004370:	462b      	mov	r3, r5
 8004372:	eb49 0303 	adc.w	r3, r9, r3
 8004376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004386:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800438a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800438e:	460b      	mov	r3, r1
 8004390:	18db      	adds	r3, r3, r3
 8004392:	653b      	str	r3, [r7, #80]	; 0x50
 8004394:	4613      	mov	r3, r2
 8004396:	eb42 0303 	adc.w	r3, r2, r3
 800439a:	657b      	str	r3, [r7, #84]	; 0x54
 800439c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043a4:	f7fb ff18 	bl	80001d8 <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4b61      	ldr	r3, [pc, #388]	; (8004534 <UART_SetConfig+0x2d4>)
 80043ae:	fba3 2302 	umull	r2, r3, r3, r2
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	011c      	lsls	r4, r3, #4
 80043b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043c8:	4642      	mov	r2, r8
 80043ca:	464b      	mov	r3, r9
 80043cc:	1891      	adds	r1, r2, r2
 80043ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80043d0:	415b      	adcs	r3, r3
 80043d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043d8:	4641      	mov	r1, r8
 80043da:	eb12 0a01 	adds.w	sl, r2, r1
 80043de:	4649      	mov	r1, r9
 80043e0:	eb43 0b01 	adc.w	fp, r3, r1
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f8:	4692      	mov	sl, r2
 80043fa:	469b      	mov	fp, r3
 80043fc:	4643      	mov	r3, r8
 80043fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004406:	464b      	mov	r3, r9
 8004408:	eb4b 0303 	adc.w	r3, fp, r3
 800440c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800441c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004420:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004424:	460b      	mov	r3, r1
 8004426:	18db      	adds	r3, r3, r3
 8004428:	643b      	str	r3, [r7, #64]	; 0x40
 800442a:	4613      	mov	r3, r2
 800442c:	eb42 0303 	adc.w	r3, r2, r3
 8004430:	647b      	str	r3, [r7, #68]	; 0x44
 8004432:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004436:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800443a:	f7fb fecd 	bl	80001d8 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4611      	mov	r1, r2
 8004444:	4b3b      	ldr	r3, [pc, #236]	; (8004534 <UART_SetConfig+0x2d4>)
 8004446:	fba3 2301 	umull	r2, r3, r3, r1
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2264      	movs	r2, #100	; 0x64
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	1acb      	subs	r3, r1, r3
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800445a:	4b36      	ldr	r3, [pc, #216]	; (8004534 <UART_SetConfig+0x2d4>)
 800445c:	fba3 2302 	umull	r2, r3, r3, r2
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004468:	441c      	add	r4, r3
 800446a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800446e:	2200      	movs	r2, #0
 8004470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004474:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004478:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	1891      	adds	r1, r2, r2
 8004482:	63b9      	str	r1, [r7, #56]	; 0x38
 8004484:	415b      	adcs	r3, r3
 8004486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800448c:	4641      	mov	r1, r8
 800448e:	1851      	adds	r1, r2, r1
 8004490:	6339      	str	r1, [r7, #48]	; 0x30
 8004492:	4649      	mov	r1, r9
 8004494:	414b      	adcs	r3, r1
 8004496:	637b      	str	r3, [r7, #52]	; 0x34
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044a4:	4659      	mov	r1, fp
 80044a6:	00cb      	lsls	r3, r1, #3
 80044a8:	4651      	mov	r1, sl
 80044aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ae:	4651      	mov	r1, sl
 80044b0:	00ca      	lsls	r2, r1, #3
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	4642      	mov	r2, r8
 80044ba:	189b      	adds	r3, r3, r2
 80044bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044c0:	464b      	mov	r3, r9
 80044c2:	460a      	mov	r2, r1
 80044c4:	eb42 0303 	adc.w	r3, r2, r3
 80044c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044e0:	460b      	mov	r3, r1
 80044e2:	18db      	adds	r3, r3, r3
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e6:	4613      	mov	r3, r2
 80044e8:	eb42 0303 	adc.w	r3, r2, r3
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044f6:	f7fb fe6f 	bl	80001d8 <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <UART_SetConfig+0x2d4>)
 8004500:	fba3 1302 	umull	r1, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	2164      	movs	r1, #100	; 0x64
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	3332      	adds	r3, #50	; 0x32
 8004512:	4a08      	ldr	r2, [pc, #32]	; (8004534 <UART_SetConfig+0x2d4>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	f003 0207 	and.w	r2, r3, #7
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4422      	add	r2, r4
 8004526:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004528:	e106      	b.n	8004738 <UART_SetConfig+0x4d8>
 800452a:	bf00      	nop
 800452c:	40011000 	.word	0x40011000
 8004530:	40011400 	.word	0x40011400
 8004534:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800453c:	2200      	movs	r2, #0
 800453e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004542:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004546:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800454a:	4642      	mov	r2, r8
 800454c:	464b      	mov	r3, r9
 800454e:	1891      	adds	r1, r2, r2
 8004550:	6239      	str	r1, [r7, #32]
 8004552:	415b      	adcs	r3, r3
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
 8004556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800455a:	4641      	mov	r1, r8
 800455c:	1854      	adds	r4, r2, r1
 800455e:	4649      	mov	r1, r9
 8004560:	eb43 0501 	adc.w	r5, r3, r1
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	00eb      	lsls	r3, r5, #3
 800456e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004572:	00e2      	lsls	r2, r4, #3
 8004574:	4614      	mov	r4, r2
 8004576:	461d      	mov	r5, r3
 8004578:	4643      	mov	r3, r8
 800457a:	18e3      	adds	r3, r4, r3
 800457c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004580:	464b      	mov	r3, r9
 8004582:	eb45 0303 	adc.w	r3, r5, r3
 8004586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004596:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045a6:	4629      	mov	r1, r5
 80045a8:	008b      	lsls	r3, r1, #2
 80045aa:	4621      	mov	r1, r4
 80045ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b0:	4621      	mov	r1, r4
 80045b2:	008a      	lsls	r2, r1, #2
 80045b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045b8:	f7fb fe0e 	bl	80001d8 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4b60      	ldr	r3, [pc, #384]	; (8004744 <UART_SetConfig+0x4e4>)
 80045c2:	fba3 2302 	umull	r2, r3, r3, r2
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	011c      	lsls	r4, r3, #4
 80045ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045dc:	4642      	mov	r2, r8
 80045de:	464b      	mov	r3, r9
 80045e0:	1891      	adds	r1, r2, r2
 80045e2:	61b9      	str	r1, [r7, #24]
 80045e4:	415b      	adcs	r3, r3
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ec:	4641      	mov	r1, r8
 80045ee:	1851      	adds	r1, r2, r1
 80045f0:	6139      	str	r1, [r7, #16]
 80045f2:	4649      	mov	r1, r9
 80045f4:	414b      	adcs	r3, r1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004604:	4659      	mov	r1, fp
 8004606:	00cb      	lsls	r3, r1, #3
 8004608:	4651      	mov	r1, sl
 800460a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800460e:	4651      	mov	r1, sl
 8004610:	00ca      	lsls	r2, r1, #3
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	4603      	mov	r3, r0
 8004618:	4642      	mov	r2, r8
 800461a:	189b      	adds	r3, r3, r2
 800461c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004620:	464b      	mov	r3, r9
 8004622:	460a      	mov	r2, r1
 8004624:	eb42 0303 	adc.w	r3, r2, r3
 8004628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	67bb      	str	r3, [r7, #120]	; 0x78
 8004636:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004644:	4649      	mov	r1, r9
 8004646:	008b      	lsls	r3, r1, #2
 8004648:	4641      	mov	r1, r8
 800464a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464e:	4641      	mov	r1, r8
 8004650:	008a      	lsls	r2, r1, #2
 8004652:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004656:	f7fb fdbf 	bl	80001d8 <__aeabi_uldivmod>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4611      	mov	r1, r2
 8004660:	4b38      	ldr	r3, [pc, #224]	; (8004744 <UART_SetConfig+0x4e4>)
 8004662:	fba3 2301 	umull	r2, r3, r3, r1
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2264      	movs	r2, #100	; 0x64
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	1acb      	subs	r3, r1, r3
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	3332      	adds	r3, #50	; 0x32
 8004674:	4a33      	ldr	r2, [pc, #204]	; (8004744 <UART_SetConfig+0x4e4>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004680:	441c      	add	r4, r3
 8004682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004686:	2200      	movs	r2, #0
 8004688:	673b      	str	r3, [r7, #112]	; 0x70
 800468a:	677a      	str	r2, [r7, #116]	; 0x74
 800468c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004690:	4642      	mov	r2, r8
 8004692:	464b      	mov	r3, r9
 8004694:	1891      	adds	r1, r2, r2
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	415b      	adcs	r3, r3
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a0:	4641      	mov	r1, r8
 80046a2:	1851      	adds	r1, r2, r1
 80046a4:	6039      	str	r1, [r7, #0]
 80046a6:	4649      	mov	r1, r9
 80046a8:	414b      	adcs	r3, r1
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046b8:	4659      	mov	r1, fp
 80046ba:	00cb      	lsls	r3, r1, #3
 80046bc:	4651      	mov	r1, sl
 80046be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c2:	4651      	mov	r1, sl
 80046c4:	00ca      	lsls	r2, r1, #3
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	4603      	mov	r3, r0
 80046cc:	4642      	mov	r2, r8
 80046ce:	189b      	adds	r3, r3, r2
 80046d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d2:	464b      	mov	r3, r9
 80046d4:	460a      	mov	r2, r1
 80046d6:	eb42 0303 	adc.w	r3, r2, r3
 80046da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	663b      	str	r3, [r7, #96]	; 0x60
 80046e6:	667a      	str	r2, [r7, #100]	; 0x64
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046f4:	4649      	mov	r1, r9
 80046f6:	008b      	lsls	r3, r1, #2
 80046f8:	4641      	mov	r1, r8
 80046fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046fe:	4641      	mov	r1, r8
 8004700:	008a      	lsls	r2, r1, #2
 8004702:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004706:	f7fb fd67 	bl	80001d8 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <UART_SetConfig+0x4e4>)
 8004710:	fba3 1302 	umull	r1, r3, r3, r2
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	2164      	movs	r1, #100	; 0x64
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	3332      	adds	r3, #50	; 0x32
 8004722:	4a08      	ldr	r2, [pc, #32]	; (8004744 <UART_SetConfig+0x4e4>)
 8004724:	fba2 2303 	umull	r2, r3, r2, r3
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4422      	add	r2, r4
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800473e:	46bd      	mov	sp, r7
 8004740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004744:	51eb851f 	.word	0x51eb851f

08004748 <memset>:
 8004748:	4402      	add	r2, r0
 800474a:	4603      	mov	r3, r0
 800474c:	4293      	cmp	r3, r2
 800474e:	d100      	bne.n	8004752 <memset+0xa>
 8004750:	4770      	bx	lr
 8004752:	f803 1b01 	strb.w	r1, [r3], #1
 8004756:	e7f9      	b.n	800474c <memset+0x4>

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	4d0d      	ldr	r5, [pc, #52]	; (8004790 <__libc_init_array+0x38>)
 800475c:	4c0d      	ldr	r4, [pc, #52]	; (8004794 <__libc_init_array+0x3c>)
 800475e:	1b64      	subs	r4, r4, r5
 8004760:	10a4      	asrs	r4, r4, #2
 8004762:	2600      	movs	r6, #0
 8004764:	42a6      	cmp	r6, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	4d0b      	ldr	r5, [pc, #44]	; (8004798 <__libc_init_array+0x40>)
 800476a:	4c0c      	ldr	r4, [pc, #48]	; (800479c <__libc_init_array+0x44>)
 800476c:	f000 f818 	bl	80047a0 <_init>
 8004770:	1b64      	subs	r4, r4, r5
 8004772:	10a4      	asrs	r4, r4, #2
 8004774:	2600      	movs	r6, #0
 8004776:	42a6      	cmp	r6, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004780:	4798      	blx	r3
 8004782:	3601      	adds	r6, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f855 3b04 	ldr.w	r3, [r5], #4
 800478a:	4798      	blx	r3
 800478c:	3601      	adds	r6, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	080047e0 	.word	0x080047e0
 8004794:	080047e0 	.word	0x080047e0
 8004798:	080047e0 	.word	0x080047e0
 800479c:	080047e4 	.word	0x080047e4

080047a0 <_init>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr

080047ac <_fini>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr
